<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Presentation | /trasteando/]]></title>
  <link href="http://rojoangel.github.io/blog/categories/presentation/atom.xml" rel="self"/>
  <link href="http://rojoangel.github.io/"/>
  <updated>2015-10-25T12:32:27+01:00</updated>
  <id>http://rojoangel.github.io/</id>
  <author>
    <name><![CDATA[Angel Rojo]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Masterclass - Dobles De Test - by Xavi Gost @ Devscola]]></title>
    <link href="http://rojoangel.github.io/blog/2015/10/25/masterclass-dobles-de-test/"/>
    <updated>2015-10-25T10:34:41+01:00</updated>
    <id>http://rojoangel.github.io/blog/2015/10/25/masterclass-dobles-de-test</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve just watched this presentation by Xavi Gost about <a href="https://www.youtube.com/watch?v=S4Ueg64xfXQ">Masterclass - Dobles de Test</a>.</p>

<p>These are notes to myself taken while watching the video:</p>

<ul>
<li>The type of test double to use should be dictated by the intention of use.</li>
<li>Test doubles:

<ul>
<li>Dummy: we only need it to be present.</li>
<li>Stub: returns fixed values.</li>
<li>Mock: more complex scenarios.</li>
</ul>
</li>
<li>Mocks are evil. When using a mock you are acknowledging a lack of ability / know-how in the design / architecture.</li>
<li>Mocks introduce complexity in a part of system (tests) that doesn&rsquo;t deliver value to the customer.</li>
</ul>


<p>Here&rsquo;s a mind map of the references used in this presentation:
<a href="https://atlas.mindmup.com/2015/10/fc0c3b005d340133db4d4147ed4fb840/masterclass_dobles_de_test/index.html"><img class="center" src="https://raw.githubusercontent.com/rojoangel/mindmup-maps/df150730b51d386066cd08423b125b77cab34580/masterclass_dobles_de_test.png"></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Testing and Refactoring Legacy Code - by Sandro Mancuso]]></title>
    <link href="http://rojoangel.github.io/blog/2015/10/24/testing-and-refactoring-legacy-code/"/>
    <updated>2015-10-24T23:38:16+02:00</updated>
    <id>http://rojoangel.github.io/blog/2015/10/24/testing-and-refactoring-legacy-code</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve just watched this presentation by Sandro Mancuso about <a href="https://www.youtube.com/watch?v=_NnElPO5BU0">Testing and Refactoring Legacy Code</a>.</p>

<p>In this video the <a href="https://github.com/sandromancuso/trip-service-kata">trip-service-kata</a> is used.</p>

<p>These are notes to myself taken while watching the video:</p>

<ul>
<li>Wrap code with tests before modifying it. If the code is not covered by tests perform IDE auto refactorings only.</li>
<li>Start testing from the lower nesting level to the deepest.</li>
<li>Start refactoring from the deepest nesting level to the shorter.</li>
<li>In the case of static methods, singletons or instances being created inside a method: create seams to make code testable. Seams can be overriden in order to obtain an intermediate testable class.</li>
<li>When working with legacy code use code coverage in order to verify that your tests cover the code they are created for.</li>
<li>Use builders to make tests more readable.</li>
<li>Refactor staying on the green side of red-green-refactor cycle as much as you can.</li>
<li>Try to convert conditionals to guards.</li>
<li>Initially get rid of variables whenever possible without considering potential performance issues caused by calling methods multiple times. Variables can be reintroduced later on if needed.</li>
<li>Your code should reflect the language in your tests if possible.</li>
<li>The language in your tests and code should be the domain language.</li>
<li>If the design is wrong - when adding tests we are perpetuating the wrong design!</li>
<li>Wrap static methods in instance methods. In your code base start replacing static calls to instance calls, until the static call is not used anymore: then you can get rid of the static method.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Design, Composition, and Performance - by Rich Hickey @ InfoQ]]></title>
    <link href="http://rojoangel.github.io/blog/2015/10/24/design/"/>
    <updated>2015-10-24T20:51:11+02:00</updated>
    <id>http://rojoangel.github.io/blog/2015/10/24/design</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve just watched this Rich Hickey&rsquo;s keynote about <a href="http://www.infoq.com/presentations/design-composition-performance-keynote">Design, Composition, and Performance</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Simple Made Easy - by Rich Hickey @ InfoQ]]></title>
    <link href="http://rojoangel.github.io/blog/2015/10/24/simple-made-easy/"/>
    <updated>2015-10-24T20:46:57+02:00</updated>
    <id>http://rojoangel.github.io/blog/2015/10/24/simple-made-easy</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve just watched this Rich Hickey&rsquo;s presentation about <a href="http://www.infoq.com/presentations/Simple-Made-Easy">Simple Made Easy</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Extremely Defensive PHP - by Marco Pivetta @ PHPSW: Coding Practices, June 2015]]></title>
    <link href="http://rojoangel.github.io/blog/2015/10/22/extremely-defensive-php/"/>
    <updated>2015-10-22T09:01:09+02:00</updated>
    <id>http://rojoangel.github.io/blog/2015/10/22/extremely-defensive-php</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve just watched this Marco Pivetta&rsquo;s presentation about <a href="https://www.youtube.com/watch?v=8d2AtAGJPno">Extremely Defensive PHP</a>.
The sides can be found <a href="http://ocramius.github.io/extremely-defensive-php/#/">here</a></p>
]]></content>
  </entry>
  
</feed>
