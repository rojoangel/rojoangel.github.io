<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Reading | /trasteando/]]></title>
  <link href="http://rojoangel.github.io/blog/categories/reading/atom.xml" rel="self"/>
  <link href="http://rojoangel.github.io/"/>
  <updated>2015-09-27T23:54:23+02:00</updated>
  <id>http://rojoangel.github.io/</id>
  <author>
    <name><![CDATA[Angel Rojo]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Things I Was Unprepared for as a Lead Developer - by Pascal De Vink @ Dev-human]]></title>
    <link href="http://rojoangel.github.io/blog/2015/09/27/things-i-was-unprepared-for-as-a-lead-developer/"/>
    <updated>2015-09-27T23:49:36+02:00</updated>
    <id>http://rojoangel.github.io/blog/2015/09/27/things-i-was-unprepared-for-as-a-lead-developer</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve just read this post about <a href="http://dev-human.com/entries/2015/09/07/things-i-was-unprepared-for/">Things I was unprepared for as a lead developer</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What to Look for in a Code Review - by Trisha Gee @ JetBrains Upsource Blog]]></title>
    <link href="http://rojoangel.github.io/blog/2015/09/27/what-to-look-for-in-a-code-review/"/>
    <updated>2015-09-27T20:24:13+02:00</updated>
    <id>http://rojoangel.github.io/blog/2015/09/27/what-to-look-for-in-a-code-review</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve just read this post about <a href="http://blog.jetbrains.com/upsource/2015/07/23/what-to-look-for-in-a-code-review/">What to look for in a Code Review</a>.</p>

<p>These are notes to myself.</p>

<p>Automatize these:
- Formatting
- Style
- Naming
- Test coverage</p>

<p>Instead look for:</p>

<p><strong>Design</strong>
- Fit with the overall architecture?
- SOLID principles, Domain Driven Design
- Design patterns used. Are these appropriate?
- Does this new code follow the current practices? Is the code migrating in the correct direction?
- Is the code in the right place?
- Could the new code have reused something in the existing code? Does the new code provide something we can reuse in the existing code? Does the new code introduce duplication?
- Is the code over-engineered? YAGNI?</p>

<p><strong>Readability &amp; Maintainability</strong>
- Do the names actually reflect the thing they represent?
- Can I understand what the code does by reading it?
- Can I understand what the tests do?
- Do the tests cover a good subset of cases? Do they cover happy paths and exceptional cases? Are there cases that haven’t been considered?
- Are the exception error messages understandable?
- Are confusing sections of code either documented, commented, or covered by understandable tests (according to team preference)?</p>

<p><strong>Functionality</strong>
- Does the code actually do what it was supposed to do? Do the tests really test the code meets the agreed requirements?
- Does the code look like it contains subtle bugs, like using the wrong variable for a check, or accidentally using an and instead of an or?</p>

<p><strong>Have you thought about…?</strong>
- Security
- Regulatory requirements that need to be met?
- Does the new code introduce avoidable performance issues
- Does the author need to create public documentation, or change existing one?
- Have user-facing messages been checked for correctness?
- Are there obvious errors that will stop this working in production?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Optimizing the Sustainable Pace - by Paul Pagel @ 8th Light]]></title>
    <link href="http://rojoangel.github.io/blog/2015/09/16/optimizing-the-sustainable-pace/"/>
    <updated>2015-09-16T22:34:24+02:00</updated>
    <id>http://rojoangel.github.io/blog/2015/09/16/optimizing-the-sustainable-pace</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve just read this post about <a href="https://blog.8thlight.com/paul-pagel/2015/09/15/optimize-sustainable-pace.html">Optimizing the Sustainable Pace</a>.</p>

<p>This are notes to myself.</p>

<blockquote><p>By doing the simplest thing that could possibly work, we’re exposing ourselves to the incidental complexity</p>

<p>The idea of sustainability assumes that resources are finite but cyclical. When you exhaust some amount of a resource, it can replenish itself only after a similar investment in its restoration.</p></blockquote>

<p>The article refers to <a href="http://shaffner.us/cs/papers/tarpit.pdf">Out of the Tar Pit - by Ben Moseley &amp; Peter Marks</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Tech Lead Paradox: Technical Needs vs Business Needs - by Pat Kua @ thekua.com@work]]></title>
    <link href="http://rojoangel.github.io/blog/2015/09/15/a-tech-lead-paradox-technical-needs-vs-business-needs/"/>
    <updated>2015-09-15T20:38:50+02:00</updated>
    <id>http://rojoangel.github.io/blog/2015/09/15/a-tech-lead-paradox-technical-needs-vs-business-needs</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve just read this post <a href="https://www.thekua.com/atwork/2014/12/a-tech-lead-paradox-technical-needs-vs-business-needs/">A tech lead paradox: technical needs vs business needs</a> about the conflict between business and technical needs:</p>

<blockquote><p>A business will always put pressure on a development team to produce as much software as possible. At the same time, effective delivery of software is not possible without addressing some level of technical needs – such as technical debt, deployment pipelines, or automated test suites.</p></blockquote>

<p>The article proposes the following practices to deal with the conflict:</p>

<ul>
<li>champion time for technical needs</li>
<li>explain the business benefit of each technical need in order to build trust with non-technical people</li>
<li>work on high impact items first</li>
<li>keep a balance</li>
<li>maximize the use of &lsquo;quiet&rsquo; periods</li>
</ul>


<p>The article refers to <a href="https://www.thoughtworks.com/de/insights/blog/embracing-paradox">Embracing Paradox - by Jim Highsmith</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Slides for My 'Dependency Injection Smells' Talk - by Matthias Noback @ PHP & Symfony]]></title>
    <link href="http://rojoangel.github.io/blog/2015/09/15/slides-for-my-dependency-injection-smells-talk/"/>
    <updated>2015-09-15T20:09:34+02:00</updated>
    <id>http://rojoangel.github.io/blog/2015/09/15/slides-for-my-dependency-injection-smells-talk</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve just read these slides about dependency injection smells: <a href="http://php-and-symfony.matthiasnoback.nl/2013/06/slides-for-my-dependency-injection-smells-talk/">Slides for my &lsquo;Dependency Injection Smells&rsquo; talk</a></p>

<p>These are notes to myself.</p>

<h3>Dependency injection smells:</h3>

<ul>
<li>static dependency</li>
<li>missing dependency auto-recovery</li>
<li>hidden dependencies</li>
<li>creation logic reduction</li>
<li>factory methods</li>
<li>programming against an implementation</li>
<li>dependencies prohibited</li>
</ul>


<h3>Keep in mind:</h3>

<ul>
<li>be clear and open about your dependencies</li>
<li>require only a minimum amount of dependencies</li>
<li>develop with your users (other developers) in mind</li>
</ul>

]]></content>
  </entry>
  
</feed>
