<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Reading | /trasteando/]]></title>
  <link href="http://rojoangel.github.io/blog/categories/reading/atom.xml" rel="self"/>
  <link href="http://rojoangel.github.io/"/>
  <updated>2015-11-04T00:03:43+01:00</updated>
  <id>http://rojoangel.github.io/</id>
  <author>
    <name><![CDATA[Angel Rojo]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Building and Deploying Microservices With Event Sourcing - by Chris Richardson @ InfoQ]]></title>
    <link href="http://rojoangel.github.io/blog/2015/10/26/building-and-deploying-microservices-with-event-sourcing/"/>
    <updated>2015-10-26T22:53:00+01:00</updated>
    <id>http://rojoangel.github.io/blog/2015/10/26/building-and-deploying-microservices-with-event-sourcing</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve just watched this presentation by Chris Richardson about <a href="http://www.infoq.com/presentations/microservices-docker-cqrs">Building and Deploying Microservices with Event Sourcing</a>.</p>

<p>These are notes to myself taken while watching the presentation:</p>

<p>Monolithic apps lock you in the technology you choose at the beginning of the project.</p>

<p>Events used to achieve eventual consistency across distributed services / datastores:</p>

<ul>
<li>Microservices publish events when state changes</li>
<li>Microservices subscribe to events

<ul>
<li>maintain eventual consistency (multiple aggregates in multiple datastores)</li>
<li>synchronize replicated data</li>
</ul>
</li>
<li>An event needs to be published atomically every time a domain entity changes its state</li>
</ul>


<p>Event sourcing: for each aggregate persist the events that lead to a particular state instead of the state itself</p>

<p>Persisting events: json is a good choice because of its loose mapping mechanism</p>

<p>Optimize by using snapshots:</p>

<ul>
<li>serialize a memento of the aggregate</li>
<li>load latest snapshot + subsequent events</li>
</ul>


<p>Business benefits of event sourcing:</p>

<ul>
<li>built-in audit log</li>
<li>enables temporal queries</li>
<li>preserved history</li>
</ul>


<p>Technical benefits:</p>

<ul>
<li>No more O/R mapping - we are just persisting events</li>
</ul>


<p>Drawbacks:</p>

<ul>
<li>Handling duplicate events / out-of-order</li>
</ul>


<p>Think of a microservice as a DDD aggregate</p>

<p>For view requests use CQRS &amp; denormalized views</p>

<p>Use an Event Archiver that subscribes to all events: enables analytics.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Going Polyglot the Easy Way - by Wojciech Ogrodowczyk @ SCBCN15]]></title>
    <link href="http://rojoangel.github.io/blog/2015/10/25/going-polyglot-the-easy-way/"/>
    <updated>2015-10-25T17:39:51+01:00</updated>
    <id>http://rojoangel.github.io/blog/2015/10/25/going-polyglot-the-easy-way</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve just watched this presentation by Wojciech Ogrodowczyk about <a href="https://www.youtube.com/watch?v=WWLnsrIpek8">Going Polyglot the Easy Way</a>.</p>

<p>The slides used during the presentation can be found <a href="https://speakerdeck.com/sharnik/going-polyglot-the-easy-way">here</a>.</p>

<p>These are notes to myself taken while watching the presentation:</p>

<ul>
<li>It&rsquo;s better if you can use the language you are learning in your daily job than spending time om evenings and weekends.</li>
<li>Look an opportunity to introduce the new language in your job.</li>
<li>Use benchmarks to prove that the language fits the job.</li>
<li>Do small changes: show results fast / throw away code</li>
<li>Internal tool is a good place to start: issues will be reported / users will be forgiving</li>
<li>Short-live code (i.e. migration code) is another good place to start.</li>
<li>Do not mess around with mission critical systems</li>
<li>Some places where introduce the new language:

<ul>
<li>Publish / Subscribe</li>
<li>SOA</li>
</ul>
</li>
<li>Learn something outside of your comfort zone: i.e. if you are used to backend learn a front end language (ELM, Clojurescript)</li>
<li>ELM has &ldquo;time travel&rdquo; capabilities: you can record sessions &amp; reply it later: debugging / triaging</li>
<li>Fix vs Growth mindset</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TestDouble - by Martin Fowler @ Bliki]]></title>
    <link href="http://rojoangel.github.io/blog/2015/10/25/testdouble/"/>
    <updated>2015-10-25T12:34:44+01:00</updated>
    <id>http://rojoangel.github.io/blog/2015/10/25/testdouble</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve just read this post by Martin Fowler about <a href="http://www.martinfowler.com/bliki/TestDouble.html">TestDouble</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Masterclass - Dobles De Test - by Xavi Gost @ Devscola]]></title>
    <link href="http://rojoangel.github.io/blog/2015/10/25/masterclass-dobles-de-test/"/>
    <updated>2015-10-25T10:34:41+01:00</updated>
    <id>http://rojoangel.github.io/blog/2015/10/25/masterclass-dobles-de-test</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve just watched this presentation by Xavi Gost about <a href="https://www.youtube.com/watch?v=S4Ueg64xfXQ">Masterclass - Dobles de Test</a>.</p>

<p>These are notes to myself taken while watching the video:</p>

<ul>
<li>The type of test double to use should be dictated by the intention of use.</li>
<li>Test doubles:

<ul>
<li>Dummy: we only need it to be present.</li>
<li>Stub: returns fixed values.</li>
<li>Mock: more complex scenarios.</li>
</ul>
</li>
<li>Mocks are evil. When using a mock you are acknowledging a lack of ability / know-how in the design / architecture.</li>
<li>Mocks introduce complexity in a part of system (tests) that doesn&rsquo;t deliver value to the customer.</li>
</ul>


<p>Here&rsquo;s a mind map of the references used in this presentation:
<a href="https://atlas.mindmup.com/2015/10/fc0c3b005d340133db4d4147ed4fb840/masterclass_dobles_de_test/index.html"><img class="center" src="https://raw.githubusercontent.com/rojoangel/mindmup-maps/df150730b51d386066cd08423b125b77cab34580/masterclass_dobles_de_test.png"></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Testing and Refactoring Legacy Code - by Sandro Mancuso]]></title>
    <link href="http://rojoangel.github.io/blog/2015/10/24/testing-and-refactoring-legacy-code/"/>
    <updated>2015-10-24T23:38:16+02:00</updated>
    <id>http://rojoangel.github.io/blog/2015/10/24/testing-and-refactoring-legacy-code</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve just watched this presentation by Sandro Mancuso about <a href="https://www.youtube.com/watch?v=_NnElPO5BU0">Testing and Refactoring Legacy Code</a>.</p>

<p>In this video the <a href="https://github.com/sandromancuso/trip-service-kata">trip-service-kata</a> is used.</p>

<p>These are notes to myself taken while watching the video:</p>

<ul>
<li>Wrap code with tests before modifying it. If the code is not covered by tests perform IDE auto refactorings only.</li>
<li>Start testing from the lower nesting level to the deepest.</li>
<li>Start refactoring from the deepest nesting level to the shorter.</li>
<li>In the case of static methods, singletons or instances being created inside a method: create seams to make code testable. Seams can be overriden in order to obtain an intermediate testable class.</li>
<li>When working with legacy code use code coverage in order to verify that your tests cover the code they are created for.</li>
<li>Use builders to make tests more readable.</li>
<li>Refactor staying on the green side of red-green-refactor cycle as much as you can.</li>
<li>Try to convert conditionals to guards.</li>
<li>Initially get rid of variables whenever possible without considering potential performance issues caused by calling methods multiple times. Variables can be reintroduced later on if needed.</li>
<li>Your code should reflect the language in your tests if possible.</li>
<li>The language in your tests and code should be the domain language.</li>
<li>If the design is wrong - when adding tests we are perpetuating the wrong design!</li>
<li>Wrap static methods in instance methods. In your code base start replacing static calls to instance calls, until the static call is not used anymore: then you can get rid of the static method.</li>
</ul>

]]></content>
  </entry>
  
</feed>
