<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Reading | /trasteando/]]></title>
  <link href="http://rojoangel.github.io/blog/categories/reading/atom.xml" rel="self"/>
  <link href="http://rojoangel.github.io/"/>
  <updated>2015-09-15T20:16:23+02:00</updated>
  <id>http://rojoangel.github.io/</id>
  <author>
    <name><![CDATA[Angel Rojo]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Slides for My 'Dependency Injection Smells' Talk - by Matthias Noback @ PHP & Symfony]]></title>
    <link href="http://rojoangel.github.io/blog/2015/09/15/slides-for-my-dependency-injection-smells-talk/"/>
    <updated>2015-09-15T20:09:34+02:00</updated>
    <id>http://rojoangel.github.io/blog/2015/09/15/slides-for-my-dependency-injection-smells-talk</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve just read these slides about dependency injection smells: <a href="http://php-and-symfony.matthiasnoback.nl/2013/06/slides-for-my-dependency-injection-smells-talk/">Slides for my &lsquo;Dependency Injection Smells&rsquo; talk</a></p>

<p>These are notes to myself.</p>

<h3>Dependency injection smells:</h3>

<ul>
<li>static dependency</li>
<li>missing dependency auto-recovery</li>
<li>hidden dependencies</li>
<li>creation logic reduction</li>
<li>factory methods</li>
<li>programming against an implementation</li>
<li>dependencies prohibited</li>
</ul>


<h3>Keep in mind:</h3>

<ul>
<li>be clear and open about your dependencies</li>
<li>require only a minimum amount of dependencies</li>
<li>develop with your users (other developers) in mind</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Inject a Repository Instead of an Entity Manager - by Matthias Noback @ PHP & Symfony]]></title>
    <link href="http://rojoangel.github.io/blog/2015/09/15/inject-a-repository-instead-of-an-entity-manager/"/>
    <updated>2015-09-15T19:45:31+02:00</updated>
    <id>http://rojoangel.github.io/blog/2015/09/15/inject-a-repository-instead-of-an-entity-manager</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve just read this post recommending to inject repository instead of an entity manager: <a href="http://php-and-symfony.matthiasnoback.nl/2014/05/inject-a-repository-instead-of-an-entity-manager/">Inject a repository instead of an entity manager</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What Is Strategic Product Management? – Solving Day to Day Problems With the Long Term in Mind - by Vasco Duarte @ Software Development Today]]></title>
    <link href="http://rojoangel.github.io/blog/2015/09/14/what-is-strategic-product-management-solving-day-to-day-problems-with-the-long-term-in-mind/"/>
    <updated>2015-09-14T20:02:04+02:00</updated>
    <id>http://rojoangel.github.io/blog/2015/09/14/what-is-strategic-product-management-solving-day-to-day-problems-with-the-long-term-in-mind</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve just read this post about strategic product management: <a href="http://softwaredevelopmenttoday.com/2013/03/what-is-strategic-product-management-solving-day-to-day-problems-with-the-long-term-in-mind/">What is Strategic Product Management? – solving day to day problems with the long term in mind</a></p>

<p>These are notes to myself:</p>

<p>Sometimes is easy to lose sight on the long term direction:</p>

<blockquote><p>One team that I worked with at some point coined the phrase “being a slave to the backlog” to describe the feeling of powerlessness, and being imprisoned in the relentless rhythm that took them from story to story through overtime and much stress without a clear vision or direction.</p></blockquote>

<p>We must always:</p>

<ul>
<li>begin with end in mind</li>
<li>define the product vision</li>
<li>regularly review those base on the feedback collected throughout development</li>
</ul>


<p>Strategic product management focuses on:</p>

<ul>
<li>strategy</li>
<li>portfolio</li>
<li>roadmap</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mocks vs. Stubs - It Has Nothing to Do With the Implementation - by Jason Gorman @ Software People Inspiring]]></title>
    <link href="http://rojoangel.github.io/blog/2015/09/13/mocks-vs-stubs-it-has-nothing-to-do-with-the-implementation/"/>
    <updated>2015-09-13T20:07:52+02:00</updated>
    <id>http://rojoangel.github.io/blog/2015/09/13/mocks-vs-stubs-it-has-nothing-to-do-with-the-implementation</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve just read this post about the difference between mocks and stubs: <a href="http://codemanship.co.uk/parlezuml/blog/?postid=1313">Mocks vs. Stubs - It Has Nothing To Do With The Implementation</a></p>

<p>According to the post:</p>

<blockquote><p>If we want our test to fail because external data suppled by a collaborator was used incorrectly, it&rsquo;s a stub.</p>

<p>If we want our test to fail because a method was not invoked (correctly) on a collaborator, it&rsquo;s a mock.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tests Should Test One Thing (?) - by Jason Gorman @ Software People Inspiring]]></title>
    <link href="http://rojoangel.github.io/blog/2015/09/13/tests-should-test-one-thing/"/>
    <updated>2015-09-13T19:55:16+02:00</updated>
    <id>http://rojoangel.github.io/blog/2015/09/13/tests-should-test-one-thing</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve just read this post about TDD best practices:  <a href="http://codemanship.co.uk/parlezuml/blog/?postid=1325">Tests Should Test One Thing (?)</a></p>

<p>The author states that</p>

<blockquote><p>unit tests should have only one reason to fail</p></blockquote>

<p>and there are several good reasons for this:</p>

<ul>
<li>Small tests tend to be easier to pass, facilitating &ldquo;baby steps&rdquo; approach to development</li>
<li>Small tests tend to be easier to understand, serving as clearer specifications</li>
<li>Small tests When failing, make it easier to pinpoint the problem</li>
</ul>

]]></content>
  </entry>
  
</feed>
