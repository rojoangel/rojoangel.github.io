<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Tdd | /trasteando/]]></title>
  <link href="http://rojoangel.github.io/blog/categories/tdd/atom.xml" rel="self"/>
  <link href="http://rojoangel.github.io/"/>
  <updated>2015-10-25T12:38:09+01:00</updated>
  <id>http://rojoangel.github.io/</id>
  <author>
    <name><![CDATA[Angel Rojo]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[TestDouble - by Martin Fowler @ Bliki]]></title>
    <link href="http://rojoangel.github.io/blog/2015/10/25/testdouble/"/>
    <updated>2015-10-25T12:34:44+01:00</updated>
    <id>http://rojoangel.github.io/blog/2015/10/25/testdouble</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve just read this post by Martin Fowler about <a href="http://www.martinfowler.com/bliki/TestDouble.html">TestDouble</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Masterclass - Dobles De Test - by Xavi Gost @ Devscola]]></title>
    <link href="http://rojoangel.github.io/blog/2015/10/25/masterclass-dobles-de-test/"/>
    <updated>2015-10-25T10:34:41+01:00</updated>
    <id>http://rojoangel.github.io/blog/2015/10/25/masterclass-dobles-de-test</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve just watched this presentation by Xavi Gost about <a href="https://www.youtube.com/watch?v=S4Ueg64xfXQ">Masterclass - Dobles de Test</a>.</p>

<p>These are notes to myself taken while watching the video:</p>

<ul>
<li>The type of test double to use should be dictated by the intention of use.</li>
<li>Test doubles:

<ul>
<li>Dummy: we only need it to be present.</li>
<li>Stub: returns fixed values.</li>
<li>Mock: more complex scenarios.</li>
</ul>
</li>
<li>Mocks are evil. When using a mock you are acknowledging a lack of ability / know-how in the design / architecture.</li>
<li>Mocks introduce complexity in a part of system (tests) that doesn&rsquo;t deliver value to the customer.</li>
</ul>


<p>Here&rsquo;s a mind map of the references used in this presentation:
<a href="https://atlas.mindmup.com/2015/10/fc0c3b005d340133db4d4147ed4fb840/masterclass_dobles_de_test/index.html"><img class="center" src="https://raw.githubusercontent.com/rojoangel/mindmup-maps/df150730b51d386066cd08423b125b77cab34580/masterclass_dobles_de_test.png"></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mocks vs. Stubs - It Has Nothing to Do With the Implementation - by Jason Gorman @ Software People Inspiring]]></title>
    <link href="http://rojoangel.github.io/blog/2015/09/13/mocks-vs-stubs-it-has-nothing-to-do-with-the-implementation/"/>
    <updated>2015-09-13T20:07:52+02:00</updated>
    <id>http://rojoangel.github.io/blog/2015/09/13/mocks-vs-stubs-it-has-nothing-to-do-with-the-implementation</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve just read this post about the difference between mocks and stubs: <a href="http://codemanship.co.uk/parlezuml/blog/?postid=1313">Mocks vs. Stubs - It Has Nothing To Do With The Implementation</a></p>

<p>According to the post:</p>

<blockquote><p>If we want our test to fail because external data suppled by a collaborator was used incorrectly, it&rsquo;s a stub.</p>

<p>If we want our test to fail because a method was not invoked (correctly) on a collaborator, it&rsquo;s a mock.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tests Should Test One Thing (?) - by Jason Gorman @ Software People Inspiring]]></title>
    <link href="http://rojoangel.github.io/blog/2015/09/13/tests-should-test-one-thing/"/>
    <updated>2015-09-13T19:55:16+02:00</updated>
    <id>http://rojoangel.github.io/blog/2015/09/13/tests-should-test-one-thing</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve just read this post about TDD best practices:  <a href="http://codemanship.co.uk/parlezuml/blog/?postid=1325">Tests Should Test One Thing (?)</a></p>

<p>The author states that</p>

<blockquote><p>unit tests should have only one reason to fail</p></blockquote>

<p>and there are several good reasons for this:</p>

<ul>
<li>Small tests tend to be easier to pass, facilitating &ldquo;baby steps&rdquo; approach to development</li>
<li>Small tests tend to be easier to understand, serving as clearer specifications</li>
<li>Small tests When failing, make it easier to pinpoint the problem</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Misadventures With Property-Based TDD: A Lesson Learned - by Nat Pryce @ Mistaeks I Hav Made]]></title>
    <link href="http://rojoangel.github.io/blog/2015/09/13/misadventures-with-property-based-tdd-a-lesson-learned/"/>
    <updated>2015-09-13T19:03:37+02:00</updated>
    <id>http://rojoangel.github.io/blog/2015/09/13/misadventures-with-property-based-tdd-a-lesson-learned</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve just read this post about TDD best practices &amp; lessons learned: <a href="http://www.natpryce.com/articles/000800.html">Mistaeks I Hav Made: Misadventures with Property-Based TDD: A Lesson Learned</a></p>

<p>Through a TDD example it reaches the following conclusion:</p>

<blockquote><p>When working from examples, we start with specifics and then generalise, by adding contradictory examples. With property-based tests it seems better to start with very general properties and then specialise.</p></blockquote>

<p>Interestingly the tests used in the example are based on <a href="https://github.com/npryce/python-factcheck">factcheck</a></p>

<blockquote><p>A simple but extensible implementation of QuickCheck for Python 2.7 and Python 3 that works well with Pytest.</p></blockquote>
]]></content>
  </entry>
  
</feed>
