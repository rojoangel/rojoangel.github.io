<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Best-practices | /trasteando/]]></title>
  <link href="http://rojoangel.github.io/blog/categories/best-practices/atom.xml" rel="self"/>
  <link href="http://rojoangel.github.io/"/>
  <updated>2015-10-24T21:07:19+02:00</updated>
  <id>http://rojoangel.github.io/</id>
  <author>
    <name><![CDATA[Angel Rojo]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Tests Should Test One Thing (?) - by Jason Gorman @ Software People Inspiring]]></title>
    <link href="http://rojoangel.github.io/blog/2015/09/13/tests-should-test-one-thing/"/>
    <updated>2015-09-13T19:55:16+02:00</updated>
    <id>http://rojoangel.github.io/blog/2015/09/13/tests-should-test-one-thing</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve just read this post about TDD best practices:  <a href="http://codemanship.co.uk/parlezuml/blog/?postid=1325">Tests Should Test One Thing (?)</a></p>

<p>The author states that</p>

<blockquote><p>unit tests should have only one reason to fail</p></blockquote>

<p>and there are several good reasons for this:</p>

<ul>
<li>Small tests tend to be easier to pass, facilitating &ldquo;baby steps&rdquo; approach to development</li>
<li>Small tests tend to be easier to understand, serving as clearer specifications</li>
<li>Small tests When failing, make it easier to pinpoint the problem</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Misadventures With Property-Based TDD: A Lesson Learned - by Nat Pryce @ Mistaeks I Hav Made]]></title>
    <link href="http://rojoangel.github.io/blog/2015/09/13/misadventures-with-property-based-tdd-a-lesson-learned/"/>
    <updated>2015-09-13T19:03:37+02:00</updated>
    <id>http://rojoangel.github.io/blog/2015/09/13/misadventures-with-property-based-tdd-a-lesson-learned</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve just read this post about TDD best practices &amp; lessons learned: <a href="http://www.natpryce.com/articles/000800.html">Mistaeks I Hav Made: Misadventures with Property-Based TDD: A Lesson Learned</a></p>

<p>Through a TDD example it reaches the following conclusion:</p>

<blockquote><p>When working from examples, we start with specifics and then generalise, by adding contradictory examples. With property-based tests it seems better to start with very general properties and then specialise.</p></blockquote>

<p>Interestingly the tests used in the example are based on <a href="https://github.com/npryce/python-factcheck">factcheck</a></p>

<blockquote><p>A simple but extensible implementation of QuickCheck for Python 2.7 and Python 3 that works well with Pytest.</p></blockquote>
]]></content>
  </entry>
  
</feed>
