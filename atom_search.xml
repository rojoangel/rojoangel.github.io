<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[/trasteando/]]></title>
  <link href="http://rojoangel.github.io/atom.xml" rel="self"/>
  <link href="http://rojoangel.github.io/"/>
  <updated>2016-02-07T12:59:53+01:00</updated>
  <id>http://rojoangel.github.io/</id>
  <author>
    <name><![CDATA[Angel Rojo]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[CAS 2015 notes]]></title>
    <summary><![CDATA[]]></summary>
    <link href="http://rojoangel.github.io/blog/2016/02/07/cas-2015-notes/"/>
    <updated>2016-02-07T12:24:41+01:00</updated>
    <id>http://rojoangel.github.io/blog/2016/02/07/cas-2015-notes</id>
    <content type="html"><![CDATA[<h1>[KY] Eugenio Moliní</h1>

<p>[idea] comuniredes de troyanos <br/>
[ref] molini.es</p>

<h1>[MS] Apertura - Carlos Ble</h1>

<p>Don&rsquo;t ask for permission. <br/>
Be the change you want to see.</p>

<h1>[EP] Apertura - Aritz Suescun</h1>

<p>[idea] The Design / Research Sprint <br/>
Inception -> <a href="I" title="heart">book</a> The Agile Samurai <br/>
[videos] Product Discovery -Marty Cagan</p>

<h1>[EP] El sindrome de Niggle, la orientacion a objetos y la familia de Juan Carlos I - Gerard Chiva</h1>

<p>Design = Do the minimum to maximize impact <br/>
Integrate changes &amp; failures in your product <br/>
[quote] &ldquo;Una obra no se completa nunca, solo te lleva al limited de tus posibilidades&rdquo;</p>

<h1>[MS] Continuous Delivery in a legacy environment - Peter Marshall</h1>

<p>It is important to get instant feedback from production <br/>
Use CI/CD to share a common vision
1. Remove unnecessary human intervention
2. Monitor / Quality gates / Steady state (know your steady state and alert when the system deviates from it)</p>

<p>[ref] The Strangler Pattern - can be used to transform a monolith <br/>
&lsquo;Devops&rsquo; and &lsquo;Tech Management&rsquo; are supporting teams at Planday company. Tech Mgmnr is kind of an architecture team. It is responsible of delivering the technical vision message. <br/>
[tip] Simplicity: one thing at a time.</p>

<h1>[DP] Viaje a lo desconocido: de lo que no soy a lo que soy - David Roncero</h1>

<p>Taller</p>

<h1>[EP] El arte de decir que no - Carlos Hernandez</h1>

<p>Some justifications used to push features to the product:
* Customer X is about to quit if we do not provide feature Y => Do not implement it if 95% of users do not use it, otherwise you&rsquo;ll end up with a Frankenstein
* We can make it optional => The product may end up with a control panel like the Enterprise
* There&rsquo;s nothing else planned => Better use the time to revisit features already implemented
* Everybody wants this => Show me the numbers
* Competitors have it => &hellip; yes, but do competitors love it?
* Someone else will build it => Have clear the &ldquo;finish line&rdquo; of your product (product vision)</p>

<p>Conclusions:
* Have a clear vision of what you want to build
* Talk to the users
* Better the user to adapt to the product than the other way round
* The user has to fall in love with what the product IS not with what the product COULD BE / WILL BE.
* Benevolent dictatorship</p>

<h1>[EP] El Big Data también el ágil (o debería) - Juan Tomás García</h1>

<p>[ref] Kappa Architecture - Jay Kreps: <a href="https://github.com/milinda/kappa-architecture.com">https://github.com/milinda/kappa-architecture.com</a> <br/>
The importance of Monitoring &amp; Logging</p>

<h1>[EP] Un paso más allá del pair programming: diseñadores empotrados - Poun Studio</h1>

<p>Enables better communication:
* non violent communication
* common vocabulary</p>

<p>It enabled:
* new ways to solve tasks
* new tools: style guide</p>

<h1>[EP] Design Thinking: the power to accept every challenge - Mariana Ivanova</h1>

<p>The space: Freedom to explore &amp; try things <br/>
The people: [ref] T-shape (broad soft skills &amp; deep expertise skills) <br/>
The approach: Problem space => Solution space | Diverge -> Converge -> Diverge -> Converge</p>

<p>Steps:
1. UNDERSTAND (The challenge) <br/>
Goal: Creative reframing => One direction
2. OBSERVATION (The trap) <br/>
Goal: Gain empathy <br/>
Techniques: Interview: 5 whys &amp; Debrief after the meeting <br/>
<a href="I" title="heart">book</a> Interviewing Users: How to Uncover Compelling Insights - Steve Portigal
3. DEFINE POINT OF VIEW (Agree on the problem to solve)
  * Goal: Make sure you are working on the same problem
  * Techniques:
    * Storytelling
    * Clustering
    * Create Persona
    * Define POV (= user + need + insight)
  * Tips:
    * Do not design for everyone => one thing at a time
    * Do not confuse solutions with needs <br/>
&mdash;&mdash;&ndash; PROBLEM SPACE ^ - SOLUTION SPACE v &mdash;&mdash;&ndash;
4. IDEATE
  * Techniques:
    * Brainstorming:
      * Go for quantity
      * Go for wild ideas
      * Defer judgement
  * [idea] Reverse Brainstorming
  * [ref]  The Power of Bad Ideas - Steve Portigal
5. PROTOTYPE (Fail early &amp; often - because it is easy &amp; fast) <br/>
Techniques: [idea] dark horse prototype
6. TEST <br/>
Negative feedback is the best feedback <br/>
<a href="I" title="heart">book</a> The Mom Test: How to Talk to Customers and Learn If Your Business Is a Good Idea When Everyone Is Lying to You - Rob Fitzpatrick
7. ITERATE<br/>
From Test get back to previous steps <br/>
Every failure is essential to learning <br/>
Find the kid inside yourself (open mind) <br/>
DO NOT FALL in love with the process <br/>
DO FALL in love with the problem</p>

<h1>[KY] Leo Antoli</h1>

<p>Correlation != Causation <br/>
<a href="I" title="heart">book</a> Spurious Correlations - Tyler Vigen <br/>
Cognitive biases <br/>
The problem is software development usually is not a lack of resources, but a lack of knowledge <br/>
[tip] Use better product monitoring &amp; exception handling <br/>
[tip] small commints => to PRD continuously. If something    broke:
* easy to identify
* easy to rollback</p>

<p>[tool] screenhero.com <br/>
Technical debt = conscious decision / you have to pay at some point != shitty code <br/>
There&rsquo;s always tension between - and some equilibrium need to be found <br/>
* build the right thing
* build the thing right
* build it fast</p>

<p>[ref] The Standish Group - Chaos Report <br/>
[tip] In meetings, first each one writes down its opinion in order to avoid being biased by the first person speaking <br/>
[ref] No true scotsman fallacy <br/>
Urgent vs Important <br/>
[ref] Anecdotal evidence</p>

<h1>[KY] Rachel Davies</h1>

<p>Spend your own time learning more:
* get insights on bad parts</p>

<p>Use people who are happy to try out things
* test the idea
* don&rsquo;t wait for everybody to accept the idea</p>

<p>Build time for learning</p>

<p>Share what you have learned</p>

<p>Involve everyone</p>

<p>Rachel works at unruly.co, here are some insights on what they are doing:
* CD: from workstation to PRD:
  * no STG
  * Automated tests
* 20% time learning &amp; researching:
  * learning is a currency (truly, they have notes)
  * swap teams / organizations
  * learn from PRD: monitoring
  * pair &amp; mob programming:
    * challenging pieces
    * whenever agreement is needed
  * strandcast: research news. recorded
* sharing learning: [idea] use a speaking token
* retrospectives
* sit with your business
* coding dojos
* swap organizations:
  * learn from each other
  * exchange with other teams &amp; organizations
* take turns => share responsibilities
* track &amp; reflect: i.e. track that learning is happening (i.e. in a calendar everyone shows what they&rsquo;ve done during the week: refactor / backlog work / learning / mob-pair programming</p>

<p>[tip] invest time learning more => then write &amp; present (i.e. about something you learned in CAS)</p>

<p>Agile coach mission: encourage people to try what they want to do / achieve</p>

<h1>[TO] Gestion del cambio y hacking cultural - Angel Medinilla</h1>

<p>[tool] <a href="http://www.myhappyforce.com/">http://www.myhappyforce.com/</a> - measures employees happiness <br/>
[ref] <a href="http://www.improvement21.com/">http://www.improvement21.com/</a> <br/>
<a href="I" title="heart">book</a> Switch: How to Change Things When Change Is Hard – Chip Heath &amp; Dan Heath <br/>
<a href="I" title="heart">book</a> Predictably Irrational: The Hidden Forces That Shape Our Decisions – Dan Ariely <br/>
[video] charlas de Emilio Duró <br/>
Herramientas para cambiar la cultura:
* storytelling
* small things, repeated 1k times
* pain driven facilitation
* [tool] <a href="https://www.hoshinplan.com/">https://www.hoshinplan.com/</a> => vision
* use early adopters => not mandatory!
* labs: 1 afternoon every 2 weeks
* experiments => kaizen board
* [idea] champion skeptic
* [idea] agile corner / agile safari
* script it
* action triggers / existing habits</p>

<h1>[DP] Soy Persona (no soy recurso) - David Fernández</h1>

<p><a href="I" title="heart">book</a> Work Rules!: Insights from Inside Google That Will Transform How You Live and Lead – Laszlo Bock <br/>
Company owners should build people</p>

<p>Confidence is bidirectional:</p>

<ul>
<li>Freedom => Self-managed teams

<ul>
<li>heterogenity</li>
<li>fellowship: pair / mob programming</li>
<li>leadership: different people can lead in different aspects</li>
<li>interconnection</li>
</ul>
</li>
<li>Motivation => Engaged employees

<ul>
<li>Goals</li>
<li>Development</li>
<li>Communication => feedback</li>
<li>Investment</li>
</ul>
</li>
<li>Happiness => Happy &amp; Productive people

<ul>
<li>Smile</li>
<li>Concilliation</li>
<li>Schedule</li>
<li>Kindness</li>
</ul>
</li>
</ul>


<h1>[MS] Dando amor a los tests - Joaquin Engelmo</h1>

<p>Cliente != Usuario <br/>
[video] Robert C Martin - Clean Architecture and Design => Framework isolation <br/>
[tip] to have a bad test base is worst than no having one
Code coverage != test quality <br/>
DRY even in tests: builders, mothers (mothers know about scenarios), [idea] mock providers / factories</p>

<p>Look at other test doubles than mocks (mocks everywhere):
* [ref] sociable unit tests: unit tests that not only talk with mocks (i.e dummies, etc.)
* helper &amp; utilities do not have side effects => there&rsquo;s no need to mock
* value objects do not have side effects => there&rsquo;s no need to mock
* Use runners &amp; dependency injection</p>

<p>Tests smells <br/>
Name the tests properly:
* the failure reporting is based on the test name
* if the name is not descriptive enough I&rsquo;d need to check the code</p>

<p>Improve readability:
* AAA: Arrange / Act / Assert => separate these phases with a blank line
* General vs specific setup: specific may be better some times in order to not lose context => better encapsulation
* DSL => private method / no libraries are needed
* One <em>logical</em> assert per test => create custom matchers / asserts</p>

<p>Separate unit / integration tests: even in different folders</p>

<p>[video] Alf Rehn (Åbo Akademi University) - How To Save Innovation From Itself</p>

<h1>[CE] Desarrollando tus capacidades a través de la improvisación - Pablo Rodríguez</h1>

<p>Improvise == to be ready for the unplanned <br/>
Do not judge, do not judge yoourself <br/>
There&rsquo;s no need to be original => create with what you have at hand <br/>
Unblocking sentence: &ldquo;Yes, and also &hellip;&rdquo; <br/>
Everybody has something to bring in <br/>
[technique] the you can not say no game</p>

<p>Follow the error edge => learn
* an error means that you have gone too far
* no error means that you haven&rsquo;t tried enough</p>

<p>Team:
* you shine when others shine => supporting each other
* be yourself, because the others are already invented => bring in your own universe => something bigger will be created</p>

<p>Listen:
* you may realize that someone else has the same problem or knows how to solve it
* open listening
* it is important too, to make you understand</p>

<p>Living the present:
* accept the new paths [technique] the intervened story</p>

<p>Simplify: Less is More => an specific action attracts attention</p>

<p><a href="I" title="heart">book</a> Improv Wisdom: Don&rsquo;t Prepare, Just Show Up – Patricia Ryan Madson</p>

<p><a href="I" title="heart">book</a> Improv-ing Agile Teams: Using Constraints to Unlock Creativity –  Paul Goddard</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building and Deploying Microservices with Event Sourcing - by Chris Richardson @ InfoQ]]></title>
    <summary><![CDATA[]]></summary>
    <link href="http://rojoangel.github.io/blog/2015/10/26/building-and-deploying-microservices-with-event-sourcing/"/>
    <updated>2015-10-26T22:53:00+01:00</updated>
    <id>http://rojoangel.github.io/blog/2015/10/26/building-and-deploying-microservices-with-event-sourcing</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve just watched this presentation by Chris Richardson about <a href="http://www.infoq.com/presentations/microservices-docker-cqrs">Building and Deploying Microservices with Event Sourcing</a>.</p>

<p>These are notes to myself taken while watching the presentation:</p>

<p>Monolithic apps lock you in the technology you choose at the beginning of the project.</p>

<p>Events used to achieve eventual consistency across distributed services / datastores:</p>

<ul>
<li>Microservices publish events when state changes</li>
<li>Microservices subscribe to events

<ul>
<li>maintain eventual consistency (multiple aggregates in multiple datastores)</li>
<li>synchronize replicated data</li>
</ul>
</li>
<li>An event needs to be published atomically every time a domain entity changes its state</li>
</ul>


<p>Event sourcing: for each aggregate persist the events that lead to a particular state instead of the state itself</p>

<p>Persisting events: json is a good choice because of its loose mapping mechanism</p>

<p>Optimize by using snapshots:</p>

<ul>
<li>serialize a memento of the aggregate</li>
<li>load latest snapshot + subsequent events</li>
</ul>


<p>Business benefits of event sourcing:</p>

<ul>
<li>built-in audit log</li>
<li>enables temporal queries</li>
<li>preserved history</li>
</ul>


<p>Technical benefits:</p>

<ul>
<li>No more O/R mapping - we are just persisting events</li>
</ul>


<p>Drawbacks:</p>

<ul>
<li>Handling duplicate events / out-of-order</li>
</ul>


<p>Think of a microservice as a DDD aggregate</p>

<p>For view requests use CQRS &amp; denormalized views</p>

<p>Use an Event Archiver that subscribes to all events: enables analytics.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Going Polyglot the Easy Way - by Wojciech Ogrodowczyk @ SCBCN15]]></title>
    <summary><![CDATA[]]></summary>
    <link href="http://rojoangel.github.io/blog/2015/10/25/going-polyglot-the-easy-way/"/>
    <updated>2015-10-25T17:39:51+01:00</updated>
    <id>http://rojoangel.github.io/blog/2015/10/25/going-polyglot-the-easy-way</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve just watched this presentation by Wojciech Ogrodowczyk about <a href="https://www.youtube.com/watch?v=WWLnsrIpek8">Going Polyglot the Easy Way</a>.</p>

<p>The slides used during the presentation can be found <a href="https://speakerdeck.com/sharnik/going-polyglot-the-easy-way">here</a>.</p>

<p>These are notes to myself taken while watching the presentation:</p>

<ul>
<li>It&rsquo;s better if you can use the language you are learning in your daily job than spending time om evenings and weekends.</li>
<li>Look an opportunity to introduce the new language in your job.</li>
<li>Use benchmarks to prove that the language fits the job.</li>
<li>Do small changes: show results fast / throw away code</li>
<li>Internal tool is a good place to start: issues will be reported / users will be forgiving</li>
<li>Short-live code (i.e. migration code) is another good place to start.</li>
<li>Do not mess around with mission critical systems</li>
<li>Some places where introduce the new language:

<ul>
<li>Publish / Subscribe</li>
<li>SOA</li>
</ul>
</li>
<li>Learn something outside of your comfort zone: i.e. if you are used to backend learn a front end language (ELM, Clojurescript)</li>
<li>ELM has &ldquo;time travel&rdquo; capabilities: you can record sessions &amp; reply it later: debugging / triaging</li>
<li>Fix vs Growth mindset</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TestDouble - by Martin Fowler @ Bliki]]></title>
    <summary><![CDATA[]]></summary>
    <link href="http://rojoangel.github.io/blog/2015/10/25/testdouble/"/>
    <updated>2015-10-25T12:34:44+01:00</updated>
    <id>http://rojoangel.github.io/blog/2015/10/25/testdouble</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve just read this post by Martin Fowler about <a href="http://www.martinfowler.com/bliki/TestDouble.html">TestDouble</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Masterclass - Dobles de Test - by Xavi Gost @ Devscola]]></title>
    <summary><![CDATA[]]></summary>
    <link href="http://rojoangel.github.io/blog/2015/10/25/masterclass-dobles-de-test/"/>
    <updated>2015-10-25T10:34:41+01:00</updated>
    <id>http://rojoangel.github.io/blog/2015/10/25/masterclass-dobles-de-test</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve just watched this presentation by Xavi Gost about <a href="https://www.youtube.com/watch?v=S4Ueg64xfXQ">Masterclass - Dobles de Test</a>.</p>

<p>These are notes to myself taken while watching the video:</p>

<ul>
<li>The type of test double to use should be dictated by the intention of use.</li>
<li>Test doubles:

<ul>
<li>Dummy: we only need it to be present.</li>
<li>Stub: returns fixed values.</li>
<li>Mock: more complex scenarios.</li>
</ul>
</li>
<li>Mocks are evil. When using a mock you are acknowledging a lack of ability / know-how in the design / architecture.</li>
<li>Mocks introduce complexity in a part of system (tests) that doesn&rsquo;t deliver value to the customer.</li>
</ul>


<p>Here&rsquo;s a mind map of the references used in this presentation:
<a href="https://atlas.mindmup.com/2015/10/fc0c3b005d340133db4d4147ed4fb840/masterclass_dobles_de_test/index.html"><img class="center" src="https://raw.githubusercontent.com/rojoangel/mindmup-maps/df150730b51d386066cd08423b125b77cab34580/masterclass_dobles_de_test.png"></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Testing and Refactoring Legacy Code - by Sandro Mancuso]]></title>
    <summary><![CDATA[]]></summary>
    <link href="http://rojoangel.github.io/blog/2015/10/24/testing-and-refactoring-legacy-code/"/>
    <updated>2015-10-24T23:38:16+02:00</updated>
    <id>http://rojoangel.github.io/blog/2015/10/24/testing-and-refactoring-legacy-code</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve just watched this presentation by Sandro Mancuso about <a href="https://www.youtube.com/watch?v=_NnElPO5BU0">Testing and Refactoring Legacy Code</a>.</p>

<p>In this video the <a href="https://github.com/sandromancuso/trip-service-kata">trip-service-kata</a> is used.</p>

<p>These are notes to myself taken while watching the video:</p>

<ul>
<li>Wrap code with tests before modifying it. If the code is not covered by tests perform IDE auto refactorings only.</li>
<li>Start testing from the lower nesting level to the deepest.</li>
<li>Start refactoring from the deepest nesting level to the shorter.</li>
<li>In the case of static methods, singletons or instances being created inside a method: create seams to make code testable. Seams can be overriden in order to obtain an intermediate testable class.</li>
<li>When working with legacy code use code coverage in order to verify that your tests cover the code they are created for.</li>
<li>Use builders to make tests more readable.</li>
<li>Refactor staying on the green side of red-green-refactor cycle as much as you can.</li>
<li>Try to convert conditionals to guards.</li>
<li>Initially get rid of variables whenever possible without considering potential performance issues caused by calling methods multiple times. Variables can be reintroduced later on if needed.</li>
<li>Your code should reflect the language in your tests if possible.</li>
<li>The language in your tests and code should be the domain language.</li>
<li>If the design is wrong - when adding tests we are perpetuating the wrong design!</li>
<li>Wrap static methods in instance methods. In your code base start replacing static calls to instance calls, until the static call is not used anymore: then you can get rid of the static method.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Design, Composition, and Performance - by Rich Hickey @ InfoQ]]></title>
    <summary><![CDATA[]]></summary>
    <link href="http://rojoangel.github.io/blog/2015/10/24/design/"/>
    <updated>2015-10-24T20:51:11+02:00</updated>
    <id>http://rojoangel.github.io/blog/2015/10/24/design</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve just watched this Rich Hickey&rsquo;s keynote about <a href="http://www.infoq.com/presentations/design-composition-performance-keynote">Design, Composition, and Performance</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Simple Made Easy - by Rich Hickey @ InfoQ]]></title>
    <summary><![CDATA[]]></summary>
    <link href="http://rojoangel.github.io/blog/2015/10/24/simple-made-easy/"/>
    <updated>2015-10-24T20:46:57+02:00</updated>
    <id>http://rojoangel.github.io/blog/2015/10/24/simple-made-easy</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve just watched this Rich Hickey&rsquo;s presentation about <a href="http://www.infoq.com/presentations/Simple-Made-Easy">Simple Made Easy</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Extremely Defensive PHP - by Marco Pivetta @ PHPSW: Coding Practices, June 2015]]></title>
    <summary><![CDATA[]]></summary>
    <link href="http://rojoangel.github.io/blog/2015/10/22/extremely-defensive-php/"/>
    <updated>2015-10-22T09:01:09+02:00</updated>
    <id>http://rojoangel.github.io/blog/2015/10/22/extremely-defensive-php</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve just watched this Marco Pivetta&rsquo;s presentation about <a href="https://www.youtube.com/watch?v=8d2AtAGJPno">Extremely Defensive PHP</a>.
The sides can be found <a href="http://ocramius.github.io/extremely-defensive-php/#/">here</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Things I was unprepared for as a lead developer - by  Pascal de Vink @ dev-human]]></title>
    <summary><![CDATA[]]></summary>
    <link href="http://rojoangel.github.io/blog/2015/09/27/things-i-was-unprepared-for-as-a-lead-developer/"/>
    <updated>2015-09-27T23:49:36+02:00</updated>
    <id>http://rojoangel.github.io/blog/2015/09/27/things-i-was-unprepared-for-as-a-lead-developer</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve just read this post about <a href="http://dev-human.com/entries/2015/09/07/things-i-was-unprepared-for/">Things I was unprepared for as a lead developer</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What to look for in a Code Review - by Trisha Gee @ JetBrains Upsource Blog]]></title>
    <summary><![CDATA[]]></summary>
    <link href="http://rojoangel.github.io/blog/2015/09/27/what-to-look-for-in-a-code-review/"/>
    <updated>2015-09-27T20:24:13+02:00</updated>
    <id>http://rojoangel.github.io/blog/2015/09/27/what-to-look-for-in-a-code-review</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve just read this post about <a href="http://blog.jetbrains.com/upsource/2015/07/23/what-to-look-for-in-a-code-review/">What to look for in a Code Review</a>.</p>

<p>These are notes to myself.</p>

<p>Automatize these:</p>

<ul>
<li>Formatting</li>
<li>Style</li>
<li>Naming</li>
<li>Test coverage</li>
</ul>


<p>Instead look for:</p>

<p><strong>Design</strong></p>

<ul>
<li>Fit with the overall architecture?</li>
<li>SOLID principles, Domain Driven Design</li>
<li>Design patterns used. Are these appropriate?</li>
<li>Does this new code follow the current practices? Is the code migrating in the correct direction?</li>
<li>Is the code in the right place?</li>
<li>Could the new code have reused something in the existing code? Does the new code provide something we can reuse in the existing code? Does the new code introduce duplication?</li>
<li>Is the code over-engineered? YAGNI?</li>
</ul>


<p><strong>Readability &amp; Maintainability</strong></p>

<ul>
<li>Do the names actually reflect the thing they represent?</li>
<li>Can I understand what the code does by reading it?</li>
<li>Can I understand what the tests do?</li>
<li>Do the tests cover a good subset of cases? Do they cover happy paths and exceptional cases? Are there cases that haven’t been considered?</li>
<li>Are the exception error messages understandable?</li>
<li>Are confusing sections of code either documented, commented, or covered by understandable tests (according to team preference)?</li>
</ul>


<p><strong>Functionality</strong></p>

<ul>
<li>Does the code actually do what it was supposed to do? Do the tests really test the code meets the agreed requirements?</li>
<li>Does the code look like it contains subtle bugs, like using the wrong variable for a check, or accidentally using an and instead of an or?</li>
</ul>


<p><strong>Have you thought about…?</strong></p>

<ul>
<li>Security</li>
<li>Regulatory requirements that need to be met?</li>
<li>Does the new code introduce avoidable performance issues</li>
<li>Does the author need to create public documentation, or change existing one?</li>
<li>Have user-facing messages been checked for correctness?</li>
<li>Are there obvious errors that will stop this working in production?</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Optimizing the Sustainable Pace - by Paul Pagel @ 8th Light]]></title>
    <summary><![CDATA[]]></summary>
    <link href="http://rojoangel.github.io/blog/2015/09/16/optimizing-the-sustainable-pace/"/>
    <updated>2015-09-16T22:34:24+02:00</updated>
    <id>http://rojoangel.github.io/blog/2015/09/16/optimizing-the-sustainable-pace</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve just read this post about <a href="https://blog.8thlight.com/paul-pagel/2015/09/15/optimize-sustainable-pace.html">Optimizing the Sustainable Pace</a>.</p>

<p>These are notes to myself.</p>

<blockquote><p>By doing the simplest thing that could possibly work, we’re exposing ourselves to the incidental complexity</p>

<p>The idea of sustainability assumes that resources are finite but cyclical. When you exhaust some amount of a resource, it can replenish itself only after a similar investment in its restoration.</p></blockquote>

<p>The article refers to <a href="http://shaffner.us/cs/papers/tarpit.pdf">Out of the Tar Pit - by Ben Moseley &amp; Peter Marks</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A tech lead paradox: technical needs vs business needs - by Pat Kua @ thekua.com@work]]></title>
    <summary><![CDATA[]]></summary>
    <link href="http://rojoangel.github.io/blog/2015/09/15/a-tech-lead-paradox-technical-needs-vs-business-needs/"/>
    <updated>2015-09-15T20:38:50+02:00</updated>
    <id>http://rojoangel.github.io/blog/2015/09/15/a-tech-lead-paradox-technical-needs-vs-business-needs</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve just read this post <a href="https://www.thekua.com/atwork/2014/12/a-tech-lead-paradox-technical-needs-vs-business-needs/">A tech lead paradox: technical needs vs business needs</a> about the conflict between business and technical needs:</p>

<blockquote><p>A business will always put pressure on a development team to produce as much software as possible. At the same time, effective delivery of software is not possible without addressing some level of technical needs – such as technical debt, deployment pipelines, or automated test suites.</p></blockquote>

<p>The article proposes the following practices to deal with the conflict:</p>

<ul>
<li>champion time for technical needs</li>
<li>explain the business benefit of each technical need in order to build trust with non-technical people</li>
<li>work on high impact items first</li>
<li>keep a balance</li>
<li>maximize the use of &lsquo;quiet&rsquo; periods</li>
</ul>


<p>The article refers to <a href="https://www.thoughtworks.com/de/insights/blog/embracing-paradox">Embracing Paradox - by Jim Highsmith</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Slides for my 'Dependency Injection Smells' talk - by Matthias Noback @ PHP & Symfony]]></title>
    <summary><![CDATA[]]></summary>
    <link href="http://rojoangel.github.io/blog/2015/09/15/slides-for-my-dependency-injection-smells-talk/"/>
    <updated>2015-09-15T20:09:34+02:00</updated>
    <id>http://rojoangel.github.io/blog/2015/09/15/slides-for-my-dependency-injection-smells-talk</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve just read these slides about dependency injection smells: <a href="http://php-and-symfony.matthiasnoback.nl/2013/06/slides-for-my-dependency-injection-smells-talk/">Slides for my &lsquo;Dependency Injection Smells&rsquo; talk</a></p>

<p>These are notes to myself.</p>

<h3>Dependency injection smells:</h3>

<ul>
<li>static dependency</li>
<li>missing dependency auto-recovery</li>
<li>hidden dependencies</li>
<li>creation logic reduction</li>
<li>factory methods</li>
<li>programming against an implementation</li>
<li>dependencies prohibited</li>
</ul>


<h3>Keep in mind:</h3>

<ul>
<li>be clear and open about your dependencies</li>
<li>require only a minimum amount of dependencies</li>
<li>develop with your users (other developers) in mind</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Inject a repository instead of an entity manager - by Matthias Noback @ PHP & Symfony]]></title>
    <summary><![CDATA[]]></summary>
    <link href="http://rojoangel.github.io/blog/2015/09/15/inject-a-repository-instead-of-an-entity-manager/"/>
    <updated>2015-09-15T19:45:31+02:00</updated>
    <id>http://rojoangel.github.io/blog/2015/09/15/inject-a-repository-instead-of-an-entity-manager</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve just read this post recommending to inject repository instead of an entity manager: <a href="http://php-and-symfony.matthiasnoback.nl/2014/05/inject-a-repository-instead-of-an-entity-manager/">Inject a repository instead of an entity manager</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What is Strategic Product Management? – solving day to day problems with the long term in mind - by Vasco Duarte @ Software Development Today]]></title>
    <summary><![CDATA[]]></summary>
    <link href="http://rojoangel.github.io/blog/2015/09/14/what-is-strategic-product-management-solving-day-to-day-problems-with-the-long-term-in-mind/"/>
    <updated>2015-09-14T20:02:04+02:00</updated>
    <id>http://rojoangel.github.io/blog/2015/09/14/what-is-strategic-product-management-solving-day-to-day-problems-with-the-long-term-in-mind</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve just read this post about strategic product management: <a href="http://softwaredevelopmenttoday.com/2013/03/what-is-strategic-product-management-solving-day-to-day-problems-with-the-long-term-in-mind/">What is Strategic Product Management? – solving day to day problems with the long term in mind</a></p>

<p>These are notes to myself:</p>

<p>Sometimes is easy to lose sight on the long term direction:</p>

<blockquote><p>One team that I worked with at some point coined the phrase “being a slave to the backlog” to describe the feeling of powerlessness, and being imprisoned in the relentless rhythm that took them from story to story through overtime and much stress without a clear vision or direction.</p></blockquote>

<p>We must always:</p>

<ul>
<li>begin with end in mind</li>
<li>define the product vision</li>
<li>regularly review those base on the feedback collected throughout development</li>
</ul>


<p>Strategic product management focuses on:</p>

<ul>
<li>strategy</li>
<li>portfolio</li>
<li>roadmap</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mocks vs. Stubs - It Has Nothing To Do With The Implementation - by Jason Gorman @ Software People Inspiring]]></title>
    <summary><![CDATA[]]></summary>
    <link href="http://rojoangel.github.io/blog/2015/09/13/mocks-vs-stubs-it-has-nothing-to-do-with-the-implementation/"/>
    <updated>2015-09-13T20:07:52+02:00</updated>
    <id>http://rojoangel.github.io/blog/2015/09/13/mocks-vs-stubs-it-has-nothing-to-do-with-the-implementation</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve just read this post about the difference between mocks and stubs: <a href="http://codemanship.co.uk/parlezuml/blog/?postid=1313">Mocks vs. Stubs - It Has Nothing To Do With The Implementation</a></p>

<p>According to the post:</p>

<blockquote><p>If we want our test to fail because external data suppled by a collaborator was used incorrectly, it&rsquo;s a stub.</p>

<p>If we want our test to fail because a method was not invoked (correctly) on a collaborator, it&rsquo;s a mock.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tests Should Test One Thing (?) - by Jason Gorman @ Software People Inspiring]]></title>
    <summary><![CDATA[]]></summary>
    <link href="http://rojoangel.github.io/blog/2015/09/13/tests-should-test-one-thing/"/>
    <updated>2015-09-13T19:55:16+02:00</updated>
    <id>http://rojoangel.github.io/blog/2015/09/13/tests-should-test-one-thing</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve just read this post about TDD best practices:  <a href="http://codemanship.co.uk/parlezuml/blog/?postid=1325">Tests Should Test One Thing (?)</a></p>

<p>The author states that</p>

<blockquote><p>unit tests should have only one reason to fail</p></blockquote>

<p>and there are several good reasons for this:</p>

<ul>
<li>Small tests tend to be easier to pass, facilitating &ldquo;baby steps&rdquo; approach to development</li>
<li>Small tests tend to be easier to understand, serving as clearer specifications</li>
<li>Small tests When failing, make it easier to pinpoint the problem</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Throw Defect - by Nat Pryce @ Mistaeks I Hav Made]]></title>
    <summary><![CDATA[]]></summary>
    <link href="http://rojoangel.github.io/blog/2015/09/13/throw-defect/"/>
    <updated>2015-09-13T19:27:48+02:00</updated>
    <id>http://rojoangel.github.io/blog/2015/09/13/throw-defect</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve just read this post about an interesting way to make explicit programmer errors: <a href="http://www.natpryce.com/articles/000739.html">Throw Defect</a></p>

<p>This can be particularly useful to catch errors that are not expected to happen. Here&rsquo;s an example from the original post:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Template</span> <span class="n">template</span><span class="o">;</span>
</span><span class='line'><span class="k">try</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">template</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Template</span><span class="o">(</span><span class="n">getClass</span><span class="o">().</span><span class="na">getResource</span><span class="o">(</span><span class="s">&quot;data-that-is-compiled-into-the-app.xml&quot;</span><span class="o">));</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// should never happen</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The &lsquo;should never happen&rsquo; comment block can be replaced - thus making the error explicit - in the following way:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Template</span> <span class="n">template</span><span class="o">;</span>
</span><span class='line'><span class="k">try</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">template</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Template</span><span class="o">(</span><span class="n">getClass</span><span class="o">().</span><span class="na">getResource</span><span class="o">(</span><span class="s">&quot;data-that-is-compiled-into-the-app.xml&quot;</span><span class="o">));</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">throw</span> <span class="k">new</span> <span class="nf">Defect</span><span class="o">(</span><span class="s">&quot;could not load template&quot;</span><span class="o">,</span> <span class="n">e</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Misadventures with Property-Based TDD: A Lesson Learned - by Nat Pryce @ Mistaeks I Hav Made]]></title>
    <summary><![CDATA[]]></summary>
    <link href="http://rojoangel.github.io/blog/2015/09/13/misadventures-with-property-based-tdd-a-lesson-learned/"/>
    <updated>2015-09-13T19:03:37+02:00</updated>
    <id>http://rojoangel.github.io/blog/2015/09/13/misadventures-with-property-based-tdd-a-lesson-learned</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve just read this post about TDD best practices &amp; lessons learned: <a href="http://www.natpryce.com/articles/000800.html">Mistaeks I Hav Made: Misadventures with Property-Based TDD: A Lesson Learned</a></p>

<p>Through a TDD example it reaches the following conclusion:</p>

<blockquote><p>When working from examples, we start with specifics and then generalise, by adding contradictory examples. With property-based tests it seems better to start with very general properties and then specialise.</p></blockquote>

<p>Interestingly the tests used in the example are based on <a href="https://github.com/npryce/python-factcheck">factcheck</a></p>

<blockquote><p>A simple but extensible implementation of QuickCheck for Python 2.7 and Python 3 that works well with Pytest.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What Not To Do In a TDD Pair Programming Interview - by Jason Gorman @ Software People Inspiring]]></title>
    <summary><![CDATA[]]></summary>
    <link href="http://rojoangel.github.io/blog/2015/09/13/what-not-to-do-in-a-tdd-pair-programming-interview/"/>
    <updated>2015-09-13T11:35:04+02:00</updated>
    <id>http://rojoangel.github.io/blog/2015/09/13/what-not-to-do-in-a-tdd-pair-programming-interview</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve just read this post about TDD best practices:  <a href="http://codemanship.co.uk/parlezuml/blog/?postid=1324">What Not To Do In a TDD Pair Programming Interview - Software People Inspiring</a></p>

<p>Although initially focused on pair programming interviews, the recommendations also apply to your day-to-day TDD flow.</p>

<p>Here&rsquo;s summary of DONT&rsquo;s:</p>

<ul>
<li>start by writing implementation code</li>
<li>introduce speculative generality (create code we don&rsquo;t need to pass the tests)</li>
<li>write weak or meaningless tests</li>
<li>write redundant tests</li>
<li>not running the tests</li>
<li>not refactoring when it&rsquo;s obviously needed</li>
<li>hack away at the code when &lsquo;refactoring&rsquo;</li>
<li>write one test that asks all the questions</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Are They The Same? Kata Java Solution]]></title>
    <summary><![CDATA[]]></summary>
    <link href="http://rojoangel.github.io/blog/2015/09/02/are-they-the-same-kata-java-solution/"/>
    <updated>2015-09-02T22:47:19+02:00</updated>
    <id>http://rojoangel.github.io/blog/2015/09/02/are-they-the-same-kata-java-solution</id>
    <content type="html"><![CDATA[<p>Today I was practicing with the <a href="http://www.codewars.com/kata/are-they-the-same">Are they the same?</a> kata from <a href="http://www.codewars.com">www.codewars.com</a></p>

<p>Here&rsquo;s a summary of the steps I followed to solve it.</p>

<h2>Description</h2>

<p>The kata goal is</p>

<blockquote><p>Given two arrays a and b write a function comp(a, b) (compSame(a, b) in Clojure) that checks whether the two arrays have the &ldquo;same&rdquo; elements, with the same multiplicities. &ldquo;Same&rdquo; means, here, that the elements in b are the elements in a squared, regardless of the order.</p></blockquote>

<p>The full description can be found at <a href="http://www.codewars.com/kata/are-they-the-same">www.codewars.com</a></p>

<!--more-->


<h2>The initial code</h2>

<p>The initial code has one class and a test.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">AreSame</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">boolean</span> <span class="nf">comp</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">a</span><span class="o">,</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">b</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">junit</span><span class="o">.</span><span class="na">Assert</span><span class="o">.*;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.junit.Test</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">AreSameTest</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Test</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">test1</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="kt">int</span><span class="o">[]</span> <span class="n">a</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[]{</span><span class="mi">121</span><span class="o">,</span> <span class="mi">144</span><span class="o">,</span> <span class="mi">19</span><span class="o">,</span> <span class="mi">161</span><span class="o">,</span> <span class="mi">19</span><span class="o">,</span> <span class="mi">144</span><span class="o">,</span> <span class="mi">19</span><span class="o">,</span> <span class="mi">11</span><span class="o">};</span>
</span><span class='line'>      <span class="kt">int</span><span class="o">[]</span> <span class="n">b</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[]{</span><span class="mi">121</span><span class="o">,</span> <span class="mi">14641</span><span class="o">,</span> <span class="mi">20736</span><span class="o">,</span> <span class="mi">361</span><span class="o">,</span> <span class="mi">25921</span><span class="o">,</span> <span class="mi">361</span><span class="o">,</span> <span class="mi">20736</span><span class="o">,</span> <span class="mi">361</span><span class="o">};</span>
</span><span class='line'>      <span class="n">assertEquals</span><span class="o">(</span><span class="n">AreSame</span><span class="o">.</span><span class="na">comp</span><span class="o">(</span><span class="n">a</span><span class="o">,</span> <span class="n">b</span><span class="o">),</span> <span class="kc">true</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The kata focuses on implementing the <code>AreSame</code> class so it passes the tests provided by the <code>AreSameTest</code> class.</p>

<p>It also seems a good idea to enhance the tests in <code>AreSameTest</code> to further test our implementation.</p>

<h2>Solution steps</h2>

<h3>Iteration 1 - true use case</h3>

<p>My goal for this first iteration was to make <code>test1</code> pass / green.</p>

<p>The <code>comp</code> method will</p>

<ul>
<li>sort array <code>a</code></li>
<li>sort array <code>b</code></li>
<li>raise <code>a</code> elements to the second power</li>
<li>compare the elements in <code>a</code> and <code>b</code></li>
</ul>


<p>This is the resulting code:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">boolean</span> <span class="nf">comp</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">a</span><span class="o">,</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">b</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Arrays</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">a</span><span class="o">);</span>
</span><span class='line'>    <span class="n">Arrays</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">b</span><span class="o">);</span>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">a</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">a</span><span class="o">[</span><span class="n">i</span><span class="o">]*</span><span class="n">a</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">!=</span> <span class="n">b</span><span class="o">[</span><span class="n">i</span><span class="o">])</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This code has a couple of problems that will be dealt with in next iterations:</p>

<ul>
<li><code>Arrays.sort()</code> is modifying the input parameters, which can be considered as a code smell.</li>
<li>The <code>for</code> loop used to compare both arrays adds a lot of code and is not expressive enough, I&rsquo;m sure there are better ways to achieve the same result</li>
</ul>


<h3>Iteration 2 - false use case</h3>

<p>The tests provided are only covering the scenario where <code>comp</code> return <code>true</code>. Let&rsquo;s add a test for <code>comp</code> returning false.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Test</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">test2</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">int</span><span class="o">[]</span> <span class="n">a</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[]{</span><span class="mi">122</span><span class="o">,</span> <span class="mi">144</span><span class="o">,</span> <span class="mi">19</span><span class="o">,</span> <span class="mi">161</span><span class="o">,</span> <span class="mi">19</span><span class="o">,</span> <span class="mi">144</span><span class="o">,</span> <span class="mi">19</span><span class="o">,</span> <span class="mi">11</span><span class="o">};</span>
</span><span class='line'>    <span class="kt">int</span><span class="o">[]</span> <span class="n">b</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[]{</span><span class="mi">121</span><span class="o">,</span> <span class="mi">14641</span><span class="o">,</span> <span class="mi">20736</span><span class="o">,</span> <span class="mi">361</span><span class="o">,</span> <span class="mi">25921</span><span class="o">,</span> <span class="mi">361</span><span class="o">,</span> <span class="mi">20736</span><span class="o">,</span> <span class="mi">361</span><span class="o">};</span>
</span><span class='line'>    <span class="n">assertEquals</span><span class="o">(</span><span class="n">AreSame</span><span class="o">.</span><span class="na">comp</span><span class="o">(</span><span class="n">a</span><span class="o">,</span> <span class="n">b</span><span class="o">),</span> <span class="kc">false</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The new test is also satisfied by the current <code>comp</code> implementation, so there&rsquo;s no need to modify the code at this stage.</p>

<h3>Iteration 3 - null / empty use case</h3>

<p>The kata description mentions that we have to deal with null and empty arrays:</p>

<blockquote><p>If a or b are nil (or null or None), the problem doesn&rsquo;t make sense so return false.</p>

<p>If a or b are empty the result is evident by itself.</p></blockquote>

<p>Let&rsquo;s add two new tests to cover for these scenarios:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Test</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">testNull</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">assertEquals</span><span class="o">(</span><span class="n">AreSame</span><span class="o">.</span><span class="na">comp</span><span class="o">(</span><span class="kc">null</span><span class="o">,</span> <span class="kc">null</span><span class="o">),</span> <span class="kc">false</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Test</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">testEmpty</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">int</span><span class="o">[]</span> <span class="n">a</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[]{};</span>
</span><span class='line'>    <span class="kt">int</span><span class="o">[]</span> <span class="n">b</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[]{};</span>
</span><span class='line'>    <span class="n">assertEquals</span><span class="o">(</span><span class="n">AreSame</span><span class="o">.</span><span class="na">comp</span><span class="o">(</span><span class="n">a</span><span class="o">,</span> <span class="n">b</span><span class="o">),</span> <span class="kc">true</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>When running the test suite, <code>testEmpty</code> is passing, but <code>testNull</code> is failing: <code>comp</code> needs to be modified to deal properly with null arrays an to bring the test suite back to green.</p>

<p>A check for null arguments is added to the <code>comp</code> method to turn the tests back to pass / green.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">a</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">b</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>and the resulting <code>comp</code> method is as follows:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">boolean</span> <span class="nf">comp</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">a</span><span class="o">,</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">b</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">a</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">b</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Arrays</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">a</span><span class="o">);</span>
</span><span class='line'>    <span class="n">Arrays</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">b</span><span class="o">);</span>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">a</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">a</span><span class="o">[</span><span class="n">i</span><span class="o">]*</span><span class="n">a</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">!=</span> <span class="n">b</span><span class="o">[</span><span class="n">i</span><span class="o">])</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Iteration 4 - Different sizes use case</h3>

<p>How will <code>comp</code> deal with arrays of different sizes? Let&rsquo;s add a couple of tests to check this scenarios:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Test</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">testBLonger</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">int</span><span class="o">[]</span> <span class="n">a</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[]{</span><span class="mi">121</span><span class="o">,</span> <span class="mi">144</span><span class="o">,</span> <span class="mi">19</span><span class="o">,</span> <span class="mi">161</span><span class="o">,</span> <span class="mi">19</span><span class="o">,</span> <span class="mi">144</span><span class="o">,</span> <span class="mi">19</span><span class="o">,</span> <span class="mi">11</span><span class="o">};</span>
</span><span class='line'>    <span class="kt">int</span><span class="o">[]</span> <span class="n">b</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[]{</span><span class="mi">121</span><span class="o">,</span> <span class="mi">14641</span><span class="o">,</span> <span class="mi">20736</span><span class="o">,</span> <span class="mi">361</span><span class="o">,</span> <span class="mi">25921</span><span class="o">,</span> <span class="mi">361</span><span class="o">,</span> <span class="mi">20736</span><span class="o">,</span> <span class="mi">361</span><span class="o">,</span> <span class="mi">2073600</span><span class="o">};</span>
</span><span class='line'>    <span class="n">assertEquals</span><span class="o">(</span><span class="n">AreSame</span><span class="o">.</span><span class="na">comp</span><span class="o">(</span><span class="n">a</span><span class="o">,</span> <span class="n">b</span><span class="o">),</span> <span class="kc">false</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Test</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">testALonger</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">int</span><span class="o">[]</span> <span class="n">a</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[]{</span><span class="mi">121</span><span class="o">,</span> <span class="mi">144</span><span class="o">,</span> <span class="mi">19</span><span class="o">,</span> <span class="mi">161</span><span class="o">,</span> <span class="mi">19</span><span class="o">,</span> <span class="mi">144</span><span class="o">,</span> <span class="mi">19</span><span class="o">,</span> <span class="mi">11</span><span class="o">,</span> <span class="mi">14400</span><span class="o">};</span>
</span><span class='line'>    <span class="kt">int</span><span class="o">[]</span> <span class="n">b</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[]{</span><span class="mi">121</span><span class="o">,</span> <span class="mi">14641</span><span class="o">,</span> <span class="mi">20736</span><span class="o">,</span> <span class="mi">361</span><span class="o">,</span> <span class="mi">25921</span><span class="o">,</span> <span class="mi">361</span><span class="o">,</span> <span class="mi">20736</span><span class="o">,</span> <span class="mi">361</span><span class="o">};</span>
</span><span class='line'>    <span class="n">assertEquals</span><span class="o">(</span><span class="n">AreSame</span><span class="o">.</span><span class="na">comp</span><span class="o">(</span><span class="n">a</span><span class="o">,</span> <span class="n">b</span><span class="o">),</span> <span class="kc">false</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Just by adding a couple of big numbers to the end of <code>a</code> and <code>b</code> we are making our code fail.</p>

<p>In order to bring the tests back to pass / green a guard to check the size of the arrays can be added:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">a</span><span class="o">.</span><span class="na">length</span> <span class="o">!=</span> <span class="n">b</span><span class="o">.</span><span class="na">length</span><span class="o">)</span> <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>and the resulting <code>comp</code> method is as follows:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">boolean</span> <span class="nf">comp</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">a</span><span class="o">,</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">b</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">a</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">b</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">a</span><span class="o">.</span><span class="na">length</span> <span class="o">!=</span> <span class="n">b</span><span class="o">.</span><span class="na">length</span><span class="o">)</span> <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Arrays</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">a</span><span class="o">);</span>
</span><span class='line'>    <span class="n">Arrays</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">b</span><span class="o">);</span>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">a</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">a</span><span class="o">[</span><span class="n">i</span><span class="o">]*</span><span class="n">a</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">!=</span> <span class="n">b</span><span class="o">[</span><span class="n">i</span><span class="o">])</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Iteration 5 - Negative numbers use case</h3>

<p>There&rsquo;s a scenario that hasn&rsquo;t been tested yet: what if <code>a</code> contains negative numbers?</p>

<p>A new test is added to cover for this scenario:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Test</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">testNegativeNumbers</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">int</span><span class="o">[]</span> <span class="n">a</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[]{</span><span class="mi">121</span><span class="o">,</span> <span class="o">-</span><span class="mi">144</span><span class="o">,</span> <span class="mi">19</span><span class="o">,</span> <span class="mi">161</span><span class="o">,</span> <span class="mi">19</span><span class="o">,</span> <span class="mi">144</span><span class="o">,</span> <span class="mi">19</span><span class="o">,</span> <span class="mi">11</span><span class="o">};</span>
</span><span class='line'>    <span class="kt">int</span><span class="o">[]</span> <span class="n">b</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[]{</span><span class="mi">121</span><span class="o">,</span> <span class="mi">14641</span><span class="o">,</span> <span class="mi">20736</span><span class="o">,</span> <span class="mi">361</span><span class="o">,</span> <span class="mi">25921</span><span class="o">,</span> <span class="mi">361</span><span class="o">,</span> <span class="mi">20736</span><span class="o">,</span> <span class="mi">361</span><span class="o">};</span>
</span><span class='line'>    <span class="n">assertEquals</span><span class="o">(</span><span class="n">AreSame</span><span class="o">.</span><span class="na">comp</span><span class="o">(</span><span class="n">a</span><span class="o">,</span> <span class="n">b</span><span class="o">),</span> <span class="kc">true</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>When the tests are run we see this one failing miserably: the code needs to be changed to bring the test suite back to green.</p>

<p>The error is caused by the fact that <code>comp</code> sorts <code>a</code> and then raises its values to the second power, which doesn&rsquo;t work well for negative numbers.</p>

<p>At a first stage I considered working with absolute values from the <code>a</code> array. In order to apply <code>Math.abs()</code> to the values in the <code>a</code> array it seemed inevitable to add a new <code>for</code> loop, but I felt lazy so I after googling a bit I found that <code>lambdas</code> may come in to rescue.</p>

<p>The following code snippet returns a new array with the <code>abs</code> function applied to all its elements:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Arrays</span><span class="o">.</span><span class="na">stream</span><span class="o">(</span><span class="n">a</span><span class="o">).</span><span class="na">map</span><span class="o">(</span><span class="n">x</span> <span class="o">-&gt;</span> <span class="n">Math</span><span class="o">.</span><span class="na">abs</span><span class="o">(</span><span class="n">x</span><span class="o">)).</span><span class="na">toArray</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Arrays can be also sorted by calling:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Arrays</span><span class="o">.</span><span class="na">stream</span><span class="o">(</span><span class="n">b</span><span class="o">).</span><span class="na">sorted</span><span class="o">().</span><span class="na">toArray</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here&rsquo;s the resulting <code>comp</code> function after making use of <code>Arrays</code>, <code>IntStreams</code> and <code>lambdas</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">java.util.Arrays</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">AreSame</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">boolean</span> <span class="nf">comp</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">a</span><span class="o">,</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">b</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">a</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">b</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">a</span><span class="o">.</span><span class="na">length</span> <span class="o">!=</span> <span class="n">b</span><span class="o">.</span><span class="na">length</span><span class="o">)</span> <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="kt">int</span><span class="o">[]</span> <span class="n">sortedA</span> <span class="o">=</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">stream</span><span class="o">(</span><span class="n">a</span><span class="o">).</span><span class="na">map</span><span class="o">(</span><span class="nl">Math:</span><span class="o">:</span><span class="n">abs</span><span class="o">).</span><span class="na">sorted</span><span class="o">().</span><span class="na">toArray</span><span class="o">();</span>
</span><span class='line'>        <span class="kt">int</span><span class="o">[]</span> <span class="n">sortedB</span> <span class="o">=</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">stream</span><span class="o">(</span><span class="n">b</span><span class="o">).</span><span class="na">sorted</span><span class="o">().</span><span class="na">toArray</span><span class="o">();</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">a</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">sortedA</span><span class="o">[</span><span class="n">i</span><span class="o">]*</span><span class="n">sortedA</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">!=</span> <span class="n">sortedB</span><span class="o">[</span><span class="n">i</span><span class="o">])</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And that brought the tests back to pass / green. Now it&rsquo;s time for some refactoring!</p>

<h3>Iteration 5 - Refactoring</h3>

<p>By using <code>IStreams</code> the original arrays passed in to the <code>comp</code> method remain untouched so we have already dealt with one of the concerns raised in our first iteration.</p>

<p>Let&rsquo;s see how the <code>comp</code> method can be refactored, and if we can get rid of the <code>for</code> loop in it used for array comparison.</p>

<p>Now that the <code>comp</code> method uses <code>lambdas</code> to apply a function to all the elements of an array, why not use <code>lambdas</code> to square the elements of <code>a</code>? By doing so <code>Arrays.equals</code> could be used to compare the resulting array with <code>b</code> and save our code for all the overhead in the <code>for</code> loop used for comparison.</p>

<p>The following code snippet applies <code>abs</code>, squares and sorts the elements in the <code>a</code> array:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Arrays</span><span class="o">.</span><span class="na">stream</span><span class="o">(</span><span class="n">a</span><span class="o">).</span><span class="na">map</span><span class="o">(</span><span class="n">x</span> <span class="o">-&gt;</span> <span class="n">Math</span><span class="o">.</span><span class="na">abs</span><span class="o">(</span><span class="n">x</span><span class="o">)).</span><span class="na">map</span><span class="o">(</span><span class="n">x</span> <span class="o">-&gt;</span> <span class="n">x</span><span class="o">*</span><span class="n">x</span><span class="o">).</span><span class="na">sorted</span><span class="o">().</span><span class="na">toArray</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Wait a minute! If we raise to the second power, <code>abs</code> is redundant, so we can get rid of it:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Arrays</span><span class="o">.</span><span class="na">stream</span><span class="o">(</span><span class="n">a</span><span class="o">).</span><span class="na">map</span><span class="o">(</span><span class="n">x</span> <span class="o">-&gt;</span> <span class="n">x</span><span class="o">*</span><span class="n">x</span><span class="o">).</span><span class="na">sorted</span><span class="o">().</span><span class="na">toArray</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>And putting it all together here is the <code>comp</code> method final version:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">boolean</span> <span class="nf">comp</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">a</span><span class="o">,</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">b</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">a</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">b</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">a</span><span class="o">.</span><span class="na">length</span> <span class="o">!=</span> <span class="n">b</span><span class="o">.</span><span class="na">length</span><span class="o">)</span> <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">int</span><span class="o">[]</span> <span class="n">sortedA</span> <span class="o">=</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">stream</span><span class="o">(</span><span class="n">a</span><span class="o">).</span><span class="na">map</span><span class="o">(</span><span class="n">x</span> <span class="o">-&gt;</span> <span class="n">x</span><span class="o">*</span><span class="n">x</span><span class="o">).</span><span class="na">sorted</span><span class="o">().</span><span class="na">toArray</span><span class="o">();</span>
</span><span class='line'>    <span class="kt">int</span><span class="o">[]</span> <span class="n">sortedB</span> <span class="o">=</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">stream</span><span class="o">(</span><span class="n">b</span><span class="o">).</span><span class="na">sorted</span><span class="o">().</span><span class="na">toArray</span><span class="o">();</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">sortedA</span><span class="o">,</span> <span class="n">sortedB</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here are the final versions of the classes of this kata:</p>

<ul>
<li><a href="https://github.com/rojoangel/codewars/blob/master/java/are-they-the-same/src/AreSame.java">AreSame.java</a></li>
<li><a href="https://github.com/rojoangel/codewars/blob/master/java/are-they-the-same/tests/AreSameTest.java">AreSameTest.java</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bootstrapping an Agile Team [Part 1 – People] - by Brendan Marsh]]></title>
    <summary><![CDATA[]]></summary>
    <link href="http://rojoangel.github.io/blog/2015/09/02/bootstrapping-an-agile-team-part-1-people/"/>
    <updated>2015-09-02T00:22:36+02:00</updated>
    <id>http://rojoangel.github.io/blog/2015/09/02/bootstrapping-an-agile-team-part-1-people</id>
    <content type="html"><![CDATA[<p>I’ve just read this post talking about some facilitations to enable team members to get to know them better: <a href="http://brendanmarsh.com/agile/bootstrapping-an-agile-team-part-1-people/">Bootstrapping an Agile Team [Part 1 – People]</a></p>

<p>Looking forward to read parts 2 &amp; 3.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Does My Bus Look Big in This? - by Martin Fowler & Jim Webber @ infoq]]></title>
    <summary><![CDATA[]]></summary>
    <link href="http://rojoangel.github.io/blog/2015/09/01/does-my-bus-look-big-in-this/"/>
    <updated>2015-09-01T00:51:36+02:00</updated>
    <id>http://rojoangel.github.io/blog/2015/09/01/does-my-bus-look-big-in-this</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve just watched this presentation by Martin Fowler and Jim Webber about enterprise integration architectures: <a href="http://www.infoq.com/presentations/soa-without-esb">Does My Bus Look Big in This?</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Program Like a Debater: Character, Commitment, Team Work, Hard Work - by Rob Mulholand @ 8th light]]></title>
    <summary><![CDATA[]]></summary>
    <link href="http://rojoangel.github.io/blog/2015/08/30/reading-program-like-a-debater-character/"/>
    <updated>2015-08-30T21:29:00+02:00</updated>
    <id>http://rojoangel.github.io/blog/2015/08/30/reading-program-like-a-debater-character</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve just read this post talking about habits of excellence and continuous improvement: <a href="https://blog.8thlight.com/rob-mulholand/2015/08/28/program-like-debater.html">Program Like a Debater: Character, Commitment, Team Work, Hard Work</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Binary Search Tree Kata PHP Solution]]></title>
    <summary><![CDATA[]]></summary>
    <link href="http://rojoangel.github.io/blog/2015/08/02/binary-search-tree-kata-php-solution/"/>
    <updated>2015-08-02T22:52:17+02:00</updated>
    <id>http://rojoangel.github.io/blog/2015/08/02/binary-search-tree-kata-php-solution</id>
    <content type="html"><![CDATA[<p>This is my php solution to the Binary Search Tree kata</p>

<!--more-->


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">namespace</span> <span class="nx">Kata</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">BinarySearchTree</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/** @var int $value */</span>
</span><span class='line'>    <span class="k">private</span> <span class="nv">$value</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/** @var BinarySearchTree $left */</span>
</span><span class='line'>    <span class="k">private</span> <span class="nv">$left</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/** @var BinarySearchTree $right */</span>
</span><span class='line'>    <span class="k">private</span> <span class="nv">$right</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * @param array $values</span>
</span><span class='line'><span class="sd">     * @return BinarySearchTree</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">static</span> <span class="k">function</span> <span class="nf">from</span><span class="p">(</span><span class="nv">$values</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$values</span> <span class="o">=</span> <span class="nb">array_filter</span><span class="p">(</span>
</span><span class='line'>            <span class="nv">$values</span><span class="p">,</span>
</span><span class='line'>            <span class="k">function</span> <span class="p">(</span><span class="nv">$val</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="o">!</span><span class="nb">is_null</span><span class="p">(</span><span class="nv">$val</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="k">empty</span><span class="p">(</span><span class="nv">$values</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nx">\InvalidArgumentException</span><span class="p">(</span><span class="s1">&#39;values cannot be empty&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="nv">$tree</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">BinarySearchTree</span><span class="p">(</span><span class="nb">array_shift</span><span class="p">(</span><span class="nv">$values</span><span class="p">));</span>
</span><span class='line'>        <span class="k">foreach</span> <span class="p">(</span><span class="nv">$values</span> <span class="k">as</span> <span class="nv">$value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nv">$tree</span><span class="o">-&gt;</span><span class="na">add</span><span class="p">(</span><span class="nv">$value</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$tree</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * @param int $value</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">private</span> <span class="k">function</span> <span class="nf">__construct</span><span class="p">(</span><span class="nv">$value</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nb">is_null</span><span class="p">(</span><span class="nv">$value</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nx">\InvalidArgumentException</span><span class="p">(</span><span class="s1">&#39;value cannot be null&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">value</span> <span class="o">=</span> <span class="nv">$value</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * @param int $value</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">add</span><span class="p">(</span><span class="nv">$value</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nv">$value</span> <span class="o">&lt;</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="k">empty</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">left</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>                <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">left</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">BinarySearchTree</span><span class="p">(</span><span class="nv">$value</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">left</span><span class="o">-&gt;</span><span class="na">add</span><span class="p">(</span><span class="nv">$value</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nv">$value</span> <span class="o">&gt;</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="k">empty</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">right</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>                <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">right</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">BinarySearchTree</span><span class="p">(</span><span class="nv">$value</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">right</span><span class="o">-&gt;</span><span class="na">add</span><span class="p">(</span><span class="nv">$value</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * @return array</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">inOrder</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$sorted</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="k">empty</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">left</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>            <span class="nv">$sorted</span> <span class="o">=</span> <span class="nb">array_merge</span><span class="p">(</span><span class="nv">$sorted</span><span class="p">,</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">left</span><span class="o">-&gt;</span><span class="na">inOrder</span><span class="p">());</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="nv">$sorted</span><span class="p">[]</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">value</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="k">empty</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">right</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>            <span class="nv">$sorted</span> <span class="o">=</span> <span class="nb">array_merge</span><span class="p">(</span><span class="nv">$sorted</span><span class="p">,</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">right</span><span class="o">-&gt;</span><span class="na">inOrder</span><span class="p">());</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$sorted</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * @return array</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">preOrder</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$sorted</span><span class="p">[]</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">value</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="k">empty</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">left</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>            <span class="nv">$sorted</span> <span class="o">=</span> <span class="nb">array_merge</span><span class="p">(</span><span class="nv">$sorted</span><span class="p">,</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">left</span><span class="o">-&gt;</span><span class="na">preOrder</span><span class="p">());</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="k">empty</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">right</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>            <span class="nv">$sorted</span> <span class="o">=</span> <span class="nb">array_merge</span><span class="p">(</span><span class="nv">$sorted</span><span class="p">,</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">right</span><span class="o">-&gt;</span><span class="na">preOrder</span><span class="p">());</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$sorted</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * @return array</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">postOrder</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$sorted</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="k">empty</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">left</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>            <span class="nv">$sorted</span> <span class="o">=</span> <span class="nb">array_merge</span><span class="p">(</span><span class="nv">$sorted</span><span class="p">,</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">left</span><span class="o">-&gt;</span><span class="na">postOrder</span><span class="p">());</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="k">empty</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">right</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>            <span class="nv">$sorted</span> <span class="o">=</span> <span class="nb">array_merge</span><span class="p">(</span><span class="nv">$sorted</span><span class="p">,</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">right</span><span class="o">-&gt;</span><span class="na">postOrder</span><span class="p">());</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="nv">$sorted</span><span class="p">[]</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">value</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$sorted</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And this are the tests produced while doing TDD</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
<span class='line-number'>225</span>
<span class='line-number'>226</span>
<span class='line-number'>227</span>
<span class='line-number'>228</span>
<span class='line-number'>229</span>
<span class='line-number'>230</span>
<span class='line-number'>231</span>
<span class='line-number'>232</span>
<span class='line-number'>233</span>
<span class='line-number'>234</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">namespace</span> <span class="nx">Kata</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="nx">InvalidArgumentException</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nx">PHPUnit_Framework_TestCase</span> <span class="k">as</span> <span class="nx">TestCase</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">BinarySearchTreeTest</span> <span class="k">extends</span> <span class="nx">TestCase</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * @param int[] $values</span>
</span><span class='line'><span class="sd">     * @expectedException InvalidArgumentException</span>
</span><span class='line'><span class="sd">     * @expectedExceptionMessage values cannot be empty</span>
</span><span class='line'><span class="sd">     * @dataProvider fromWithEmptyArgumentsDataProvider</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">testFromWithEmptyArguments</span><span class="p">(</span><span class="nv">$values</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nx">BinarySearchTree</span><span class="o">::</span><span class="na">from</span><span class="p">(</span><span class="nv">$values</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * @return array</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">fromWithEmptyArgumentsDataProvider</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">[</span>
</span><span class='line'>            <span class="s1">&#39;empty values&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span>
</span><span class='line'>                <span class="p">[]</span>
</span><span class='line'>            <span class="p">],</span>
</span><span class='line'>            <span class="s1">&#39;one null value&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span>
</span><span class='line'>                <span class="p">[</span><span class="k">null</span><span class="p">]</span>
</span><span class='line'>            <span class="p">],</span>
</span><span class='line'>            <span class="s1">&#39;multiple null values&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span>
</span><span class='line'>                <span class="p">[</span><span class="k">null</span><span class="p">,</span> <span class="k">null</span><span class="p">,</span> <span class="k">null</span><span class="p">,</span> <span class="k">null</span><span class="p">]</span>
</span><span class='line'>            <span class="p">]</span>
</span><span class='line'>        <span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * @param $values</span>
</span><span class='line'><span class="sd">     * @param $expectedSortedValues</span>
</span><span class='line'><span class="sd">     * @dataProvider providerForTestInOrder</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">testInOrder</span><span class="p">(</span><span class="nv">$values</span><span class="p">,</span> <span class="nv">$expectedSortedValues</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$tree</span> <span class="o">=</span> <span class="nx">BinarySearchTree</span><span class="o">::</span><span class="na">from</span><span class="p">(</span><span class="nv">$values</span><span class="p">);</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">assertEquals</span><span class="p">(</span><span class="nv">$expectedSortedValues</span><span class="p">,</span> <span class="nv">$tree</span><span class="o">-&gt;</span><span class="na">inOrder</span><span class="p">());</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * @return array</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">providerForTestInOrder</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">[</span>
</span><span class='line'>            <span class="s1">&#39;single positive value&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span>
</span><span class='line'>                <span class="p">[</span><span class="mi">4</span><span class="p">],</span>
</span><span class='line'>                <span class="p">[</span><span class="mi">4</span><span class="p">]],</span>
</span><span class='line'>            <span class="s1">&#39;single zero value&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span>
</span><span class='line'>                <span class="p">[</span><span class="mi">0</span><span class="p">],</span>
</span><span class='line'>                <span class="p">[</span><span class="mi">0</span><span class="p">]],</span>
</span><span class='line'>            <span class="s1">&#39;single negative value&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span>
</span><span class='line'>                <span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span>
</span><span class='line'>                <span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]],</span>
</span><span class='line'>            <span class="s1">&#39;left value #1&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span>
</span><span class='line'>                <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">2</span><span class="p">],</span>
</span><span class='line'>                <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">]],</span>
</span><span class='line'>            <span class="s1">&#39;left value #2&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span>
</span><span class='line'>                <span class="p">[</span><span class="mi">6</span><span class="p">,</span> <span class="mi">5</span><span class="p">],</span>
</span><span class='line'>                <span class="p">[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">]],</span>
</span><span class='line'>            <span class="s1">&#39;left value #3&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span>
</span><span class='line'>                <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">],</span>
</span><span class='line'>                <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="p">]],</span>
</span><span class='line'>            <span class="s1">&#39;left value #4&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span>
</span><span class='line'>                <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">],</span>
</span><span class='line'>                <span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">]],</span>
</span><span class='line'>            <span class="s1">&#39;right value #1&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span>
</span><span class='line'>                <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">],</span>
</span><span class='line'>                <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">]],</span>
</span><span class='line'>            <span class="s1">&#39;right value #2&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span>
</span><span class='line'>                <span class="p">[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">],</span>
</span><span class='line'>                <span class="p">[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">]],</span>
</span><span class='line'>            <span class="s1">&#39;right value #3&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span>
</span><span class='line'>                <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="p">],</span>
</span><span class='line'>                <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="p">]],</span>
</span><span class='line'>            <span class="s1">&#39;right value #4&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span>
</span><span class='line'>                <span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">],</span>
</span><span class='line'>                <span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">]],</span>
</span><span class='line'>            <span class="s1">&#39;multiple values #1&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span>
</span><span class='line'>                <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">],</span>
</span><span class='line'>                <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">]],</span>
</span><span class='line'>            <span class="s1">&#39;multiple values #2&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span>
</span><span class='line'>                <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">],</span>
</span><span class='line'>                <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">]],</span>
</span><span class='line'>            <span class="s1">&#39;multiple values #3&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span>
</span><span class='line'>                <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">],</span>
</span><span class='line'>                <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">]],</span>
</span><span class='line'>            <span class="s1">&#39;multiple values #4&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span>
</span><span class='line'>                <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="k">null</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">],</span>
</span><span class='line'>                <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">]],</span>
</span><span class='line'>            <span class="s1">&#39;multiple values #5&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span>
</span><span class='line'>                <span class="p">[</span><span class="mi">6</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">],</span>
</span><span class='line'>                <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">]],</span>
</span><span class='line'>            <span class="s1">&#39;multiple values #6&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span>
</span><span class='line'>                <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">1</span><span class="p">],</span>
</span><span class='line'>                <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">]]</span>
</span><span class='line'>        <span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * @param $values</span>
</span><span class='line'><span class="sd">     * @param $expectedSortedValues</span>
</span><span class='line'><span class="sd">     * @dataProvider providerForTestPreOrder</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">testPreOrder</span><span class="p">(</span><span class="nv">$values</span><span class="p">,</span> <span class="nv">$expectedSortedValues</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$tree</span> <span class="o">=</span> <span class="nx">BinarySearchTree</span><span class="o">::</span><span class="na">from</span><span class="p">(</span><span class="nv">$values</span><span class="p">);</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">assertEquals</span><span class="p">(</span><span class="nv">$expectedSortedValues</span><span class="p">,</span> <span class="nv">$tree</span><span class="o">-&gt;</span><span class="na">preOrder</span><span class="p">());</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * @return array</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">providerForTestPreOrder</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">[</span>
</span><span class='line'>            <span class="s1">&#39;left value #1&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span>
</span><span class='line'>                <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">2</span><span class="p">],</span>
</span><span class='line'>                <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">2</span><span class="p">]],</span>
</span><span class='line'>            <span class="s1">&#39;left value #2&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span>
</span><span class='line'>                <span class="p">[</span><span class="mi">6</span><span class="p">,</span> <span class="mi">5</span><span class="p">],</span>
</span><span class='line'>                <span class="p">[</span><span class="mi">6</span><span class="p">,</span> <span class="mi">5</span><span class="p">]],</span>
</span><span class='line'>            <span class="s1">&#39;left value #3&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span>
</span><span class='line'>                <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">],</span>
</span><span class='line'>                <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">]],</span>
</span><span class='line'>            <span class="s1">&#39;left value #4&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span>
</span><span class='line'>                <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">],</span>
</span><span class='line'>                <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">]],</span>
</span><span class='line'>            <span class="s1">&#39;right value #1&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span>
</span><span class='line'>                <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">],</span>
</span><span class='line'>                <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">]],</span>
</span><span class='line'>            <span class="s1">&#39;right value #2&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span>
</span><span class='line'>                <span class="p">[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">],</span>
</span><span class='line'>                <span class="p">[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">]],</span>
</span><span class='line'>            <span class="s1">&#39;right value #3&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span>
</span><span class='line'>                <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="p">],</span>
</span><span class='line'>                <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="p">]],</span>
</span><span class='line'>            <span class="s1">&#39;right value #4&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span>
</span><span class='line'>                <span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">],</span>
</span><span class='line'>                <span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">]],</span>
</span><span class='line'>            <span class="s1">&#39;multiple values #1&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span>
</span><span class='line'>                <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">],</span>
</span><span class='line'>                <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">]],</span>
</span><span class='line'>            <span class="s1">&#39;multiple values #2&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span>
</span><span class='line'>                <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">],</span>
</span><span class='line'>                <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">]],</span>
</span><span class='line'>            <span class="s1">&#39;multiple values #3&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span>
</span><span class='line'>                <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">],</span>
</span><span class='line'>                <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">]],</span>
</span><span class='line'>            <span class="s1">&#39;multiple values #4&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span>
</span><span class='line'>                <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="k">null</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">],</span>
</span><span class='line'>                <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">]],</span>
</span><span class='line'>            <span class="s1">&#39;multiple values #5&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span>
</span><span class='line'>                <span class="p">[</span><span class="mi">6</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">],</span>
</span><span class='line'>                <span class="p">[</span><span class="mi">6</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">]],</span>
</span><span class='line'>            <span class="s1">&#39;multiple values #6&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span>
</span><span class='line'>                <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">1</span><span class="p">],</span>
</span><span class='line'>                <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">5</span><span class="p">]]</span>
</span><span class='line'>        <span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * @param $values</span>
</span><span class='line'><span class="sd">     * @param $expectedSortedValues</span>
</span><span class='line'><span class="sd">     * @dataProvider providerForTestPostOrder</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">testPostOrder</span><span class="p">(</span><span class="nv">$values</span><span class="p">,</span> <span class="nv">$expectedSortedValues</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$tree</span> <span class="o">=</span> <span class="nx">BinarySearchTree</span><span class="o">::</span><span class="na">from</span><span class="p">(</span><span class="nv">$values</span><span class="p">);</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">assertEquals</span><span class="p">(</span><span class="nv">$expectedSortedValues</span><span class="p">,</span> <span class="nv">$tree</span><span class="o">-&gt;</span><span class="na">postOrder</span><span class="p">());</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * @return array</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">providerForTestPostOrder</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">[</span>
</span><span class='line'>            <span class="s1">&#39;left value #1&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span>
</span><span class='line'>                <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">2</span><span class="p">],</span>
</span><span class='line'>                <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">]],</span>
</span><span class='line'>            <span class="s1">&#39;left value #2&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span>
</span><span class='line'>                <span class="p">[</span><span class="mi">6</span><span class="p">,</span> <span class="mi">5</span><span class="p">],</span>
</span><span class='line'>                <span class="p">[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">]],</span>
</span><span class='line'>            <span class="s1">&#39;left value #3&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span>
</span><span class='line'>                <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">],</span>
</span><span class='line'>                <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="p">]],</span>
</span><span class='line'>            <span class="s1">&#39;left value #4&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span>
</span><span class='line'>                <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">],</span>
</span><span class='line'>                <span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">]],</span>
</span><span class='line'>            <span class="s1">&#39;right value #1&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span>
</span><span class='line'>                <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">],</span>
</span><span class='line'>                <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">2</span><span class="p">]],</span>
</span><span class='line'>            <span class="s1">&#39;right value #2&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span>
</span><span class='line'>                <span class="p">[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">],</span>
</span><span class='line'>                <span class="p">[</span><span class="mi">6</span><span class="p">,</span> <span class="mi">5</span><span class="p">]],</span>
</span><span class='line'>            <span class="s1">&#39;right value #3&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span>
</span><span class='line'>                <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="p">],</span>
</span><span class='line'>                <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">]],</span>
</span><span class='line'>            <span class="s1">&#39;right value #4&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span>
</span><span class='line'>                <span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">],</span>
</span><span class='line'>                <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">]],</span>
</span><span class='line'>            <span class="s1">&#39;multiple values #1&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span>
</span><span class='line'>                <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">],</span>
</span><span class='line'>                <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">2</span><span class="p">]],</span>
</span><span class='line'>            <span class="s1">&#39;multiple values #2&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span>
</span><span class='line'>                <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">],</span>
</span><span class='line'>                <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">]],</span>
</span><span class='line'>            <span class="s1">&#39;multiple values #3&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span>
</span><span class='line'>                <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">],</span>
</span><span class='line'>                <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">]],</span>
</span><span class='line'>            <span class="s1">&#39;multiple values #4&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span>
</span><span class='line'>                <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="k">null</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">],</span>
</span><span class='line'>                <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">]],</span>
</span><span class='line'>            <span class="s1">&#39;multiple values #5&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span>
</span><span class='line'>                <span class="p">[</span><span class="mi">6</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">],</span>
</span><span class='line'>                <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">]],</span>
</span><span class='line'>            <span class="s1">&#39;multiple values #6&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span>
</span><span class='line'>                <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">1</span><span class="p">],</span>
</span><span class='line'>                <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">3</span><span class="p">]]</span>
</span><span class='line'>        <span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
</feed>
