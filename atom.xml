<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[/trasteando/]]></title>
  <link href="http://rojoangel.github.io/atom.xml" rel="self"/>
  <link href="http://rojoangel.github.io/"/>
  <updated>2015-11-04T00:03:43+01:00</updated>
  <id>http://rojoangel.github.io/</id>
  <author>
    <name><![CDATA[Angel Rojo]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Building and Deploying Microservices With Event Sourcing - by Chris Richardson @ InfoQ]]></title>
    <link href="http://rojoangel.github.io/blog/2015/10/26/building-and-deploying-microservices-with-event-sourcing/"/>
    <updated>2015-10-26T22:53:00+01:00</updated>
    <id>http://rojoangel.github.io/blog/2015/10/26/building-and-deploying-microservices-with-event-sourcing</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve just watched this presentation by Chris Richardson about <a href="http://www.infoq.com/presentations/microservices-docker-cqrs">Building and Deploying Microservices with Event Sourcing</a>.</p>

<p>These are notes to myself taken while watching the presentation:</p>

<p>Monolithic apps lock you in the technology you choose at the beginning of the project.</p>

<p>Events used to achieve eventual consistency across distributed services / datastores:</p>

<ul>
<li>Microservices publish events when state changes</li>
<li>Microservices subscribe to events

<ul>
<li>maintain eventual consistency (multiple aggregates in multiple datastores)</li>
<li>synchronize replicated data</li>
</ul>
</li>
<li>An event needs to be published atomically every time a domain entity changes its state</li>
</ul>


<p>Event sourcing: for each aggregate persist the events that lead to a particular state instead of the state itself</p>

<p>Persisting events: json is a good choice because of its loose mapping mechanism</p>

<p>Optimize by using snapshots:</p>

<ul>
<li>serialize a memento of the aggregate</li>
<li>load latest snapshot + subsequent events</li>
</ul>


<p>Business benefits of event sourcing:</p>

<ul>
<li>built-in audit log</li>
<li>enables temporal queries</li>
<li>preserved history</li>
</ul>


<p>Technical benefits:</p>

<ul>
<li>No more O/R mapping - we are just persisting events</li>
</ul>


<p>Drawbacks:</p>

<ul>
<li>Handling duplicate events / out-of-order</li>
</ul>


<p>Think of a microservice as a DDD aggregate</p>

<p>For view requests use CQRS &amp; denormalized views</p>

<p>Use an Event Archiver that subscribes to all events: enables analytics.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Going Polyglot the Easy Way - by Wojciech Ogrodowczyk @ SCBCN15]]></title>
    <link href="http://rojoangel.github.io/blog/2015/10/25/going-polyglot-the-easy-way/"/>
    <updated>2015-10-25T17:39:51+01:00</updated>
    <id>http://rojoangel.github.io/blog/2015/10/25/going-polyglot-the-easy-way</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve just watched this presentation by Wojciech Ogrodowczyk about <a href="https://www.youtube.com/watch?v=WWLnsrIpek8">Going Polyglot the Easy Way</a>.</p>

<p>The slides used during the presentation can be found <a href="https://speakerdeck.com/sharnik/going-polyglot-the-easy-way">here</a>.</p>

<p>These are notes to myself taken while watching the presentation:</p>

<ul>
<li>It&rsquo;s better if you can use the language you are learning in your daily job than spending time om evenings and weekends.</li>
<li>Look an opportunity to introduce the new language in your job.</li>
<li>Use benchmarks to prove that the language fits the job.</li>
<li>Do small changes: show results fast / throw away code</li>
<li>Internal tool is a good place to start: issues will be reported / users will be forgiving</li>
<li>Short-live code (i.e. migration code) is another good place to start.</li>
<li>Do not mess around with mission critical systems</li>
<li>Some places where introduce the new language:

<ul>
<li>Publish / Subscribe</li>
<li>SOA</li>
</ul>
</li>
<li>Learn something outside of your comfort zone: i.e. if you are used to backend learn a front end language (ELM, Clojurescript)</li>
<li>ELM has &ldquo;time travel&rdquo; capabilities: you can record sessions &amp; reply it later: debugging / triaging</li>
<li>Fix vs Growth mindset</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TestDouble - by Martin Fowler @ Bliki]]></title>
    <link href="http://rojoangel.github.io/blog/2015/10/25/testdouble/"/>
    <updated>2015-10-25T12:34:44+01:00</updated>
    <id>http://rojoangel.github.io/blog/2015/10/25/testdouble</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve just read this post by Martin Fowler about <a href="http://www.martinfowler.com/bliki/TestDouble.html">TestDouble</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Masterclass - Dobles De Test - by Xavi Gost @ Devscola]]></title>
    <link href="http://rojoangel.github.io/blog/2015/10/25/masterclass-dobles-de-test/"/>
    <updated>2015-10-25T10:34:41+01:00</updated>
    <id>http://rojoangel.github.io/blog/2015/10/25/masterclass-dobles-de-test</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve just watched this presentation by Xavi Gost about <a href="https://www.youtube.com/watch?v=S4Ueg64xfXQ">Masterclass - Dobles de Test</a>.</p>

<p>These are notes to myself taken while watching the video:</p>

<ul>
<li>The type of test double to use should be dictated by the intention of use.</li>
<li>Test doubles:

<ul>
<li>Dummy: we only need it to be present.</li>
<li>Stub: returns fixed values.</li>
<li>Mock: more complex scenarios.</li>
</ul>
</li>
<li>Mocks are evil. When using a mock you are acknowledging a lack of ability / know-how in the design / architecture.</li>
<li>Mocks introduce complexity in a part of system (tests) that doesn&rsquo;t deliver value to the customer.</li>
</ul>


<p>Here&rsquo;s a mind map of the references used in this presentation:
<a href="https://atlas.mindmup.com/2015/10/fc0c3b005d340133db4d4147ed4fb840/masterclass_dobles_de_test/index.html"><img class="center" src="https://raw.githubusercontent.com/rojoangel/mindmup-maps/df150730b51d386066cd08423b125b77cab34580/masterclass_dobles_de_test.png"></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Testing and Refactoring Legacy Code - by Sandro Mancuso]]></title>
    <link href="http://rojoangel.github.io/blog/2015/10/24/testing-and-refactoring-legacy-code/"/>
    <updated>2015-10-24T23:38:16+02:00</updated>
    <id>http://rojoangel.github.io/blog/2015/10/24/testing-and-refactoring-legacy-code</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve just watched this presentation by Sandro Mancuso about <a href="https://www.youtube.com/watch?v=_NnElPO5BU0">Testing and Refactoring Legacy Code</a>.</p>

<p>In this video the <a href="https://github.com/sandromancuso/trip-service-kata">trip-service-kata</a> is used.</p>

<p>These are notes to myself taken while watching the video:</p>

<ul>
<li>Wrap code with tests before modifying it. If the code is not covered by tests perform IDE auto refactorings only.</li>
<li>Start testing from the lower nesting level to the deepest.</li>
<li>Start refactoring from the deepest nesting level to the shorter.</li>
<li>In the case of static methods, singletons or instances being created inside a method: create seams to make code testable. Seams can be overriden in order to obtain an intermediate testable class.</li>
<li>When working with legacy code use code coverage in order to verify that your tests cover the code they are created for.</li>
<li>Use builders to make tests more readable.</li>
<li>Refactor staying on the green side of red-green-refactor cycle as much as you can.</li>
<li>Try to convert conditionals to guards.</li>
<li>Initially get rid of variables whenever possible without considering potential performance issues caused by calling methods multiple times. Variables can be reintroduced later on if needed.</li>
<li>Your code should reflect the language in your tests if possible.</li>
<li>The language in your tests and code should be the domain language.</li>
<li>If the design is wrong - when adding tests we are perpetuating the wrong design!</li>
<li>Wrap static methods in instance methods. In your code base start replacing static calls to instance calls, until the static call is not used anymore: then you can get rid of the static method.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Design, Composition, and Performance - by Rich Hickey @ InfoQ]]></title>
    <link href="http://rojoangel.github.io/blog/2015/10/24/design/"/>
    <updated>2015-10-24T20:51:11+02:00</updated>
    <id>http://rojoangel.github.io/blog/2015/10/24/design</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve just watched this Rich Hickey&rsquo;s keynote about <a href="http://www.infoq.com/presentations/design-composition-performance-keynote">Design, Composition, and Performance</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Simple Made Easy - by Rich Hickey @ InfoQ]]></title>
    <link href="http://rojoangel.github.io/blog/2015/10/24/simple-made-easy/"/>
    <updated>2015-10-24T20:46:57+02:00</updated>
    <id>http://rojoangel.github.io/blog/2015/10/24/simple-made-easy</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve just watched this Rich Hickey&rsquo;s presentation about <a href="http://www.infoq.com/presentations/Simple-Made-Easy">Simple Made Easy</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Extremely Defensive PHP - by Marco Pivetta @ PHPSW: Coding Practices, June 2015]]></title>
    <link href="http://rojoangel.github.io/blog/2015/10/22/extremely-defensive-php/"/>
    <updated>2015-10-22T09:01:09+02:00</updated>
    <id>http://rojoangel.github.io/blog/2015/10/22/extremely-defensive-php</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve just watched this Marco Pivetta&rsquo;s presentation about <a href="https://www.youtube.com/watch?v=8d2AtAGJPno">Extremely Defensive PHP</a>.
The sides can be found <a href="http://ocramius.github.io/extremely-defensive-php/#/">here</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Things I Was Unprepared for as a Lead Developer - by Pascal De Vink @ Dev-human]]></title>
    <link href="http://rojoangel.github.io/blog/2015/09/27/things-i-was-unprepared-for-as-a-lead-developer/"/>
    <updated>2015-09-27T23:49:36+02:00</updated>
    <id>http://rojoangel.github.io/blog/2015/09/27/things-i-was-unprepared-for-as-a-lead-developer</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve just read this post about <a href="http://dev-human.com/entries/2015/09/07/things-i-was-unprepared-for/">Things I was unprepared for as a lead developer</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What to Look for in a Code Review - by Trisha Gee @ JetBrains Upsource Blog]]></title>
    <link href="http://rojoangel.github.io/blog/2015/09/27/what-to-look-for-in-a-code-review/"/>
    <updated>2015-09-27T20:24:13+02:00</updated>
    <id>http://rojoangel.github.io/blog/2015/09/27/what-to-look-for-in-a-code-review</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve just read this post about <a href="http://blog.jetbrains.com/upsource/2015/07/23/what-to-look-for-in-a-code-review/">What to look for in a Code Review</a>.</p>

<p>These are notes to myself.</p>

<p>Automatize these:</p>

<ul>
<li>Formatting</li>
<li>Style</li>
<li>Naming</li>
<li>Test coverage</li>
</ul>


<p>Instead look for:</p>

<p><strong>Design</strong></p>

<ul>
<li>Fit with the overall architecture?</li>
<li>SOLID principles, Domain Driven Design</li>
<li>Design patterns used. Are these appropriate?</li>
<li>Does this new code follow the current practices? Is the code migrating in the correct direction?</li>
<li>Is the code in the right place?</li>
<li>Could the new code have reused something in the existing code? Does the new code provide something we can reuse in the existing code? Does the new code introduce duplication?</li>
<li>Is the code over-engineered? YAGNI?</li>
</ul>


<p><strong>Readability &amp; Maintainability</strong></p>

<ul>
<li>Do the names actually reflect the thing they represent?</li>
<li>Can I understand what the code does by reading it?</li>
<li>Can I understand what the tests do?</li>
<li>Do the tests cover a good subset of cases? Do they cover happy paths and exceptional cases? Are there cases that haven’t been considered?</li>
<li>Are the exception error messages understandable?</li>
<li>Are confusing sections of code either documented, commented, or covered by understandable tests (according to team preference)?</li>
</ul>


<p><strong>Functionality</strong></p>

<ul>
<li>Does the code actually do what it was supposed to do? Do the tests really test the code meets the agreed requirements?</li>
<li>Does the code look like it contains subtle bugs, like using the wrong variable for a check, or accidentally using an and instead of an or?</li>
</ul>


<p><strong>Have you thought about…?</strong></p>

<ul>
<li>Security</li>
<li>Regulatory requirements that need to be met?</li>
<li>Does the new code introduce avoidable performance issues</li>
<li>Does the author need to create public documentation, or change existing one?</li>
<li>Have user-facing messages been checked for correctness?</li>
<li>Are there obvious errors that will stop this working in production?</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Optimizing the Sustainable Pace - by Paul Pagel @ 8th Light]]></title>
    <link href="http://rojoangel.github.io/blog/2015/09/16/optimizing-the-sustainable-pace/"/>
    <updated>2015-09-16T22:34:24+02:00</updated>
    <id>http://rojoangel.github.io/blog/2015/09/16/optimizing-the-sustainable-pace</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve just read this post about <a href="https://blog.8thlight.com/paul-pagel/2015/09/15/optimize-sustainable-pace.html">Optimizing the Sustainable Pace</a>.</p>

<p>These are notes to myself.</p>

<blockquote><p>By doing the simplest thing that could possibly work, we’re exposing ourselves to the incidental complexity</p>

<p>The idea of sustainability assumes that resources are finite but cyclical. When you exhaust some amount of a resource, it can replenish itself only after a similar investment in its restoration.</p></blockquote>

<p>The article refers to <a href="http://shaffner.us/cs/papers/tarpit.pdf">Out of the Tar Pit - by Ben Moseley &amp; Peter Marks</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Tech Lead Paradox: Technical Needs vs Business Needs - by Pat Kua @ thekua.com@work]]></title>
    <link href="http://rojoangel.github.io/blog/2015/09/15/a-tech-lead-paradox-technical-needs-vs-business-needs/"/>
    <updated>2015-09-15T20:38:50+02:00</updated>
    <id>http://rojoangel.github.io/blog/2015/09/15/a-tech-lead-paradox-technical-needs-vs-business-needs</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve just read this post <a href="https://www.thekua.com/atwork/2014/12/a-tech-lead-paradox-technical-needs-vs-business-needs/">A tech lead paradox: technical needs vs business needs</a> about the conflict between business and technical needs:</p>

<blockquote><p>A business will always put pressure on a development team to produce as much software as possible. At the same time, effective delivery of software is not possible without addressing some level of technical needs – such as technical debt, deployment pipelines, or automated test suites.</p></blockquote>

<p>The article proposes the following practices to deal with the conflict:</p>

<ul>
<li>champion time for technical needs</li>
<li>explain the business benefit of each technical need in order to build trust with non-technical people</li>
<li>work on high impact items first</li>
<li>keep a balance</li>
<li>maximize the use of &lsquo;quiet&rsquo; periods</li>
</ul>


<p>The article refers to <a href="https://www.thoughtworks.com/de/insights/blog/embracing-paradox">Embracing Paradox - by Jim Highsmith</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Slides for My 'Dependency Injection Smells' Talk - by Matthias Noback @ PHP & Symfony]]></title>
    <link href="http://rojoangel.github.io/blog/2015/09/15/slides-for-my-dependency-injection-smells-talk/"/>
    <updated>2015-09-15T20:09:34+02:00</updated>
    <id>http://rojoangel.github.io/blog/2015/09/15/slides-for-my-dependency-injection-smells-talk</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve just read these slides about dependency injection smells: <a href="http://php-and-symfony.matthiasnoback.nl/2013/06/slides-for-my-dependency-injection-smells-talk/">Slides for my &lsquo;Dependency Injection Smells&rsquo; talk</a></p>

<p>These are notes to myself.</p>

<h3>Dependency injection smells:</h3>

<ul>
<li>static dependency</li>
<li>missing dependency auto-recovery</li>
<li>hidden dependencies</li>
<li>creation logic reduction</li>
<li>factory methods</li>
<li>programming against an implementation</li>
<li>dependencies prohibited</li>
</ul>


<h3>Keep in mind:</h3>

<ul>
<li>be clear and open about your dependencies</li>
<li>require only a minimum amount of dependencies</li>
<li>develop with your users (other developers) in mind</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Inject a Repository Instead of an Entity Manager - by Matthias Noback @ PHP & Symfony]]></title>
    <link href="http://rojoangel.github.io/blog/2015/09/15/inject-a-repository-instead-of-an-entity-manager/"/>
    <updated>2015-09-15T19:45:31+02:00</updated>
    <id>http://rojoangel.github.io/blog/2015/09/15/inject-a-repository-instead-of-an-entity-manager</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve just read this post recommending to inject repository instead of an entity manager: <a href="http://php-and-symfony.matthiasnoback.nl/2014/05/inject-a-repository-instead-of-an-entity-manager/">Inject a repository instead of an entity manager</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What Is Strategic Product Management? – Solving Day to Day Problems With the Long Term in Mind - by Vasco Duarte @ Software Development Today]]></title>
    <link href="http://rojoangel.github.io/blog/2015/09/14/what-is-strategic-product-management-solving-day-to-day-problems-with-the-long-term-in-mind/"/>
    <updated>2015-09-14T20:02:04+02:00</updated>
    <id>http://rojoangel.github.io/blog/2015/09/14/what-is-strategic-product-management-solving-day-to-day-problems-with-the-long-term-in-mind</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve just read this post about strategic product management: <a href="http://softwaredevelopmenttoday.com/2013/03/what-is-strategic-product-management-solving-day-to-day-problems-with-the-long-term-in-mind/">What is Strategic Product Management? – solving day to day problems with the long term in mind</a></p>

<p>These are notes to myself:</p>

<p>Sometimes is easy to lose sight on the long term direction:</p>

<blockquote><p>One team that I worked with at some point coined the phrase “being a slave to the backlog” to describe the feeling of powerlessness, and being imprisoned in the relentless rhythm that took them from story to story through overtime and much stress without a clear vision or direction.</p></blockquote>

<p>We must always:</p>

<ul>
<li>begin with end in mind</li>
<li>define the product vision</li>
<li>regularly review those base on the feedback collected throughout development</li>
</ul>


<p>Strategic product management focuses on:</p>

<ul>
<li>strategy</li>
<li>portfolio</li>
<li>roadmap</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mocks vs. Stubs - It Has Nothing to Do With the Implementation - by Jason Gorman @ Software People Inspiring]]></title>
    <link href="http://rojoangel.github.io/blog/2015/09/13/mocks-vs-stubs-it-has-nothing-to-do-with-the-implementation/"/>
    <updated>2015-09-13T20:07:52+02:00</updated>
    <id>http://rojoangel.github.io/blog/2015/09/13/mocks-vs-stubs-it-has-nothing-to-do-with-the-implementation</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve just read this post about the difference between mocks and stubs: <a href="http://codemanship.co.uk/parlezuml/blog/?postid=1313">Mocks vs. Stubs - It Has Nothing To Do With The Implementation</a></p>

<p>According to the post:</p>

<blockquote><p>If we want our test to fail because external data suppled by a collaborator was used incorrectly, it&rsquo;s a stub.</p>

<p>If we want our test to fail because a method was not invoked (correctly) on a collaborator, it&rsquo;s a mock.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tests Should Test One Thing (?) - by Jason Gorman @ Software People Inspiring]]></title>
    <link href="http://rojoangel.github.io/blog/2015/09/13/tests-should-test-one-thing/"/>
    <updated>2015-09-13T19:55:16+02:00</updated>
    <id>http://rojoangel.github.io/blog/2015/09/13/tests-should-test-one-thing</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve just read this post about TDD best practices:  <a href="http://codemanship.co.uk/parlezuml/blog/?postid=1325">Tests Should Test One Thing (?)</a></p>

<p>The author states that</p>

<blockquote><p>unit tests should have only one reason to fail</p></blockquote>

<p>and there are several good reasons for this:</p>

<ul>
<li>Small tests tend to be easier to pass, facilitating &ldquo;baby steps&rdquo; approach to development</li>
<li>Small tests tend to be easier to understand, serving as clearer specifications</li>
<li>Small tests When failing, make it easier to pinpoint the problem</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Throw Defect - by Nat Pryce @ Mistaeks I Hav Made]]></title>
    <link href="http://rojoangel.github.io/blog/2015/09/13/throw-defect/"/>
    <updated>2015-09-13T19:27:48+02:00</updated>
    <id>http://rojoangel.github.io/blog/2015/09/13/throw-defect</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve just read this post about an interesting way to make explicit programmer errors: <a href="http://www.natpryce.com/articles/000739.html">Throw Defect</a></p>

<p>This can be particularly useful to catch errors that are not expected to happen. Here&rsquo;s an example from the original post:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Template</span> <span class="n">template</span><span class="o">;</span>
</span><span class='line'><span class="k">try</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">template</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Template</span><span class="o">(</span><span class="n">getClass</span><span class="o">().</span><span class="na">getResource</span><span class="o">(</span><span class="s">&quot;data-that-is-compiled-into-the-app.xml&quot;</span><span class="o">));</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// should never happen</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The &lsquo;should never happen&rsquo; comment block can be replaced - thus making the error explicit - in the following way:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Template</span> <span class="n">template</span><span class="o">;</span>
</span><span class='line'><span class="k">try</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">template</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Template</span><span class="o">(</span><span class="n">getClass</span><span class="o">().</span><span class="na">getResource</span><span class="o">(</span><span class="s">&quot;data-that-is-compiled-into-the-app.xml&quot;</span><span class="o">));</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">throw</span> <span class="k">new</span> <span class="nf">Defect</span><span class="o">(</span><span class="s">&quot;could not load template&quot;</span><span class="o">,</span> <span class="n">e</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Misadventures With Property-Based TDD: A Lesson Learned - by Nat Pryce @ Mistaeks I Hav Made]]></title>
    <link href="http://rojoangel.github.io/blog/2015/09/13/misadventures-with-property-based-tdd-a-lesson-learned/"/>
    <updated>2015-09-13T19:03:37+02:00</updated>
    <id>http://rojoangel.github.io/blog/2015/09/13/misadventures-with-property-based-tdd-a-lesson-learned</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve just read this post about TDD best practices &amp; lessons learned: <a href="http://www.natpryce.com/articles/000800.html">Mistaeks I Hav Made: Misadventures with Property-Based TDD: A Lesson Learned</a></p>

<p>Through a TDD example it reaches the following conclusion:</p>

<blockquote><p>When working from examples, we start with specifics and then generalise, by adding contradictory examples. With property-based tests it seems better to start with very general properties and then specialise.</p></blockquote>

<p>Interestingly the tests used in the example are based on <a href="https://github.com/npryce/python-factcheck">factcheck</a></p>

<blockquote><p>A simple but extensible implementation of QuickCheck for Python 2.7 and Python 3 that works well with Pytest.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What Not to Do in a TDD Pair Programming Interview - by Jason Gorman @ Software People Inspiring]]></title>
    <link href="http://rojoangel.github.io/blog/2015/09/13/what-not-to-do-in-a-tdd-pair-programming-interview/"/>
    <updated>2015-09-13T11:35:04+02:00</updated>
    <id>http://rojoangel.github.io/blog/2015/09/13/what-not-to-do-in-a-tdd-pair-programming-interview</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve just read this post about TDD best practices:  <a href="http://codemanship.co.uk/parlezuml/blog/?postid=1324">What Not To Do In a TDD Pair Programming Interview - Software People Inspiring</a></p>

<p>Although initially focused on pair programming interviews, the recommendations also apply to your day-to-day TDD flow.</p>

<p>Here&rsquo;s summary of DONT&rsquo;s:</p>

<ul>
<li>start by writing implementation code</li>
<li>introduce speculative generality (create code we don&rsquo;t need to pass the tests)</li>
<li>write weak or meaningless tests</li>
<li>write redundant tests</li>
<li>not running the tests</li>
<li>not refactoring when it&rsquo;s obviously needed</li>
<li>hack away at the code when &lsquo;refactoring&rsquo;</li>
<li>write one test that asks all the questions</li>
</ul>

]]></content>
  </entry>
  
</feed>
